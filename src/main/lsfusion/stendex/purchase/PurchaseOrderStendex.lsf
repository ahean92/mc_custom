MODULE PurchaseOrderStendex;

REQUIRE PurchaseOrderSearch, ProjectPurchaseOrder, PurchaseOrderConfirmed, PurchaseOrderLocked;

NAMESPACE Purchase;

dataColor 'Цвет' = DATA COLOR (OrderStatus);
caption 'Подпись' = DATA STRING[50] (OrderStatus);
captionButton (OrderStatus s) = OVERRIDE caption(s), name(s);

useCustomStatus = ABSTRACT BOOLEAN ();
useCustomStatus() += TRUE;

dataStatus = DATA OrderStatus (Order);
status(Order o) += WHEN useCustomStatus() AND dataStatus(o) THEN dataStatus(o);
allowStatusSet 'Разрешить' = DATA BOOLEAN (OrderStatus, UserRole);


EXTEND FORM Purchase.options
    OBJECTS s = OrderStatus
    PROPERTIES (s) name, imagedName, dataColor, caption
    
    OBJECTS role = UserRole
    PROPERTIES allowStatusSet(s, role), name(role) READONLY 
;

DESIGN Purchase.options{
    tabbedPane{
        NEW orderStatus{
            caption = 'Статусы заказа';
            horizontal = TRUE;
            MOVE BOX (s){
                fill = 0.8;
            }
            MOVE BOX (role) {
                fill = 0.2;
            }
        }
    }
}

//прикрепление файлов
CLASS TypeFile{
    paymentOrder 'Платежное поручение',
    invoice 'Счет',
    consignment 'Накладная',
    other 'Другое'
}

type = DATA TypeFile (OrderFile) NONULL;
nameType 'Тип' (OrderFile f) = staticCaption(type(f));
WHEN SET (OrderFile f IS OrderFile) AND NOT type(f) DO type(f) <- TypeFile.other;


isPP (OrderFile f) = type(f) = TypeFile.paymentOrder;
amount 'Сумма' = DATA NUMERIC[16,2](OrderFile);
overDescription (OrderFile f) = CONCAT ' /', description(f), 'Сумма: ' + amount(f);

amountPayed 'Оплачено' (Order o) = GROUP SUM amount(OrderFile f) IF isPP(f) BY objet(f);
CONSTRAINT SET (OrderFile f IS OrderFile) AND isPP(f) AND NOT amount(f) MESSAGE 'При загрузке платежного поручения необходимо ввести сумму';

payedPartial (Order o) = amountPayed(o) AND untaxedAmount(o) AND amountPayed(o) < untaxedAmount(o);
payed (Order o) = amountPayed(o) AND untaxedAmount(o) AND amountPayed(o) >= untaxedAmount(o);
invoice 'Счет' (Order o) = GROUP LAST OrderFile f ORDER dateTime(f) WHERE type(f) = TypeFile.invoice AND objet(f) = o;
openInvoice 'Счет' (Order f) { open(file(invoice(f)), nameExtension(invoice(f))); } IMAGE 'open.png';
fileInvoice (Purchase.Order o) = file(invoice(o));

consignment 'Накладная' (Order o) = GROUP LAST OrderFile f ORDER dateTime(f) WHERE type(f) = TypeFile.consignment AND objet(f) = o;
openConsignment 'Накладная' (Order f) { open(file(consignment(f)), nameExtension(invoice(f))); } IMAGE 'open.png';
fileConsignment (Purchase.Order o) = file(consignment(o));

EXTEND FORM order
    PROPERTIES (of) nameType FIRST, amount READONLYIF NOT isPP(of)
    PROPERTIES (o) amountPayed
;
DESIGN order{
    total{
        MOVE PROPERTY (amountPayed(o));
    }
}
EXTEND FORM orders
    FILTERGROUP statusCustom
        FILTER 'Draft' status(o) = OrderStatus.draft
        FILTER 'Отменен' status(o) = OrderStatus.canceled
;

changeStatus ABSTRACT LIST (Order, OrderStatus);
changeStatus (Order o, OrderStatus s) +{
    APPLY;
    IF canceled() THEN RETURN;
}
META defineStatusOrder(name, caption)
EXTEND CLASS OrderStatus{
    name caption
}

changeStatus (Order o, OrderStatus s) +{
    IF s = OrderStatus.##name THEN NEWSESSION {
        dataStatus(o) <- s;
        APPLY;
    }
}
EXTEND FORM orders
    EXTEND FILTERGROUP statusCustom
        FILTER caption status(o) = OrderStatus.name
;
END

@defineStatusOrder(inPayment, 'В оплате');
color(OrderStatus o) += WHEN o = OrderStatus.inPayment THEN RGB(255, 255, 51);


@defineStatusOrder(partiallyPaid, 'Оплачено частитчно');
color(OrderStatus o) += WHEN o = OrderStatus.partiallyPaid THEN RGB(255, 204, 102);

@defineStatusOrder(awaitingDelivery, 'Ждем доставки');
color(OrderStatus o) += WHEN o = OrderStatus.awaitingDelivery THEN RGB(204, 255, 204);

@defineStatusOrder(closed, 'Закрыт');
color(OrderStatus o) += WHEN o = OrderStatus.closed THEN RGB(102, 255, 102);

@defineStatusOrder(review, 'На рассмотрении');

@defineStatusOrder(delivered, 'Доставлен');
WHEN SETCHANGED (dataStatus(Order o) = OrderStatus.delivered)  DO confirmed(o) <- TRUE;

changeStatus (Order o, OrderStatus s) +{
    IF s = OrderStatus.canceled THEN  NEWSESSION {
        dataStatus(o) <- s;
        APPLY;
    }
}
showStatusRule = ABSTRACT CASE BOOLEAN (Order, OrderStatus);
showStatusRule(Order o, OrderStatus s) += WHEN status(o) = OrderStatus.draft AND ((s = OrderStatus.review AND invoice(o)) OR s = OrderStatus.canceled) THEN TRUE;
showStatusRule(Order o, OrderStatus s) += WHEN status(o) = OrderStatus.review AND (s = OrderStatus.inPayment OR s = OrderStatus.canceled) THEN TRUE;
showStatusRule(Order o, OrderStatus s) += WHEN status(o) = OrderStatus.partiallyPaid AND (( s = OrderStatus.awaitingDelivery AND payed(o)) OR s = OrderStatus.canceled) THEN TRUE;
showStatusRule(Order o, OrderStatus s) += WHEN status(o) = OrderStatus.inPayment AND ((s = OrderStatus.partiallyPaid AND payedPartial(o)) OR (s = OrderStatus.awaitingDelivery AND payed(o))OR s = OrderStatus.canceled) THEN TRUE;
showStatusRule(Order o, OrderStatus s) += WHEN status(o) = OrderStatus.awaitingDelivery AND (s = OrderStatus.delivered OR s = OrderStatus.canceled) THEN TRUE;
showStatusRule(Order o, OrderStatus s) += WHEN status(o) = OrderStatus.delivered AND ((s = OrderStatus.closed AND consignment(o)) OR s = OrderStatus.canceled) THEN TRUE;
showStatus (Order o, OrderStatus s) = showStatusRule(o, s) AND (GROUP SUM 1 IF allowStatusSet(s, UserRole r) AND in(currentUser(), r));

color(Order o, OrderStatus s) = IF o IS Order THEN color(s);
uploadFile 'Загрузить файл'(Order o){
    INPUT uf = NAMEDFILE DO NEW uof = OrderFile {
        objet(uof) <- o;
        file(uof) <- RAWFILE(uf);
        name(uof) <- name(uf);
        extension(uof) <- extension(uf);
    }
} IMAGE 'add.png';

EXTEND FORM order
    OBJECTS s = OrderStatus
    PROPERTIES (o, s) changeStatus COLUMNS (s) HEADER captionButton(s) BACKGROUND dataColor(s) SHOWIF countOrderLine(o)
    FILTERS showStatus(o, s)
    PROPERTIES uploadFile(o) TOOLBAR DRAW of
;

DESIGN order{
    REMOVE statusActions;
    REMOVE status;
    REMOVE PROPERTY (uploadFile());
    header{
        horizontal = FALSE;
        headerLeft{
            horizontal = TRUE;
            MOVE PROPERTY (imagedNameStatus(o));
            NEW statusButton{
                horizontal = TRUE;
                caption = 'Действия';
                MOVE PROPERTY (changeStatus(o, s));
            }
        }
        headerRight{
            horizontal = TRUE;
        }
    }
    relatedDoc{
        fill = 0;
    }
    details{
        MOVE files AFTER lines;
        MOVE search AFTER files;
        lines{
            caption = badged('Товары', countOrderLine(o));
        }
    }
    files{
        
    }
}

showPanel = DATA LOCAL BOOLEAN ();

showPanelControl(){
    showPanel() <- NOT showPanel();
}
EXTEND FORM orders
    PROPERTIES () showPanelControl TOOLBAR DRAW o
;

DESIGN orders{
    REMOVE PROPERTY (nameProject(o));
    REMOVE FILTERGROUP (status);
    REMOVE FILTERGROUP (unlocked);
    PROPERTY (showPanelControl()) {
        caption = IF showPanel() THEN 'Скрыть фильтры' ELSE 'Фильтры';
    }
    rightPane{
        showIf = showPanel();
    }
}
CONSTRAINT SETCHANGED (vendor(Order o)) AND vendor(o) IS Employee CHECKED BY vendor[Order] 
    MESSAGE 'Сотрудник не может быть поставщиком';

WHEN SETCHANGED (invoice(Order o)) AND status(o) = OrderStatus.draft DO changeStatus(o, OrderStatus.review);
WHEN SETCHANGED (isPP(OrderFile f)) AND amountPayed(objet(f)) < untaxedAmount(objet(f)) AND status(objet(f)) = OrderStatus.inPayment 
    DO changeStatus(objet(f), OrderStatus.partiallyPaid);

WHEN SETCHANGED (isPP(OrderFile f)) AND amountPayed(objet(f)) >= untaxedAmount(objet(f)) 
    AND (status(objet(f)) = OrderStatus.inPayment OR status(objet(f)) = OrderStatus.partiallyPaid)
    DO changeStatus(objet(f), OrderStatus.awaitingDelivery);

changedLines (Order o) = [GROUP SUM 1 IF SETCHANGED (item(OrderLine l)) OR SETCHANGED (quantity(l)) OR SETCHANGED (price(l)) BY order(l)](o);

CONSTRAINT LOCAL CHANGED(changedLines(Order o)) AND invoice(o) MESSAGE 'Нельзя изменять документ после прикрепления счета';
