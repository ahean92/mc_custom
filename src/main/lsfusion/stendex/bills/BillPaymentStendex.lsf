MODULE BillPaymentStendex;

REQUIRE BillStendex, BillDebt, BillPayment, OutgoingPaymentDone;

NAMESPACE Invoicing;

//paid 'Оплачено' = DATA NUMERIC[16,3] (Bill); // пока как DATA свойство
//toPay 'К оплате' (Bill b) = amount(b) (-) paid(b);
status(Bill b) += WHEN useCustomStatus() AND dataStatus(b) THEN dataStatus(b);

paidDone 'Оплачено' (Bill b) = GROUP SUM paid(b, OutgoingPayment p) IF active(p) AND done(p) MATERIALIZED;
toPay 'К оплате' (Bill b) = GROUP SUM paid(b, OutgoingPayment p) IF active(p) AND NOT done(p) MATERIALIZED;

countPaidAll (IncomingDebt p) = GROUP SUM 1 IF paid(p, OutgoingDebt d);
CONSTRAINT DROPPED(Bill b IS Bill) AND PREV(countPaidAll(b)) MESSAGE 'Запрещено удалять счет, по которому есть платежи';

partiallyPaid(Bill b) = b IS Bill AND paid(b) AND NOT toPay(b) AND NOT done(b) MATERIALIZED;
EXTEND CLASS BillStatus {
    partiallyPaid 'Частично оплачен'
}
status(Bill b) += WHEN partiallyPaid(b) THEN BillStatus.partiallyPaid;
color (BillStatus s) += WHEN s = BillStatus.partiallyPaid THEN RGB(187,242,210);

toReady (Bill b) = (b IS Bill AND NOT ready(b) AND NOT onApproval(b)) OR partiallyPaid(b) MATERIALIZED;

calcReady (Bill b) = (b IS Bill AND paid(b)) OR done(b);
WHEN GOAFTER ready[Bill], done[Bill] CHANGED(calcReady(Bill b)) OR CHANGED(ready(b)) DO 
    ready(b) <- calcReady(b);

calcDone (Bill b) = paidDone(b) = amount(b);
WHEN GOAFTER done[Bill] CHANGED(calcDone(Bill b)) OR CHANGED(done(b)) DO 
    done(b) <- calcDone(b);

FORM dialogNewPayment 'Новая оплата'
    OBJECTS n = NUMERIC[14,2] PANEL
    PROPERTIES(n) amount'Введите сумму :' = VALUE 
;
DESIGN dialogNewPayment{
    width = 300;
    OBJECTS {
        alignment = STRETCH;
        MOVE PROPERTY (amount) { alignment = STRETCH;}
    }
}

WHEN SETCHANGED(paid(OutgoingPayment p)) DO amount(p) <- paid(p);

createPayment (Bill b, NUMERIC[14,2] n) {
    NEWSESSION {
        NEW p = OutgoingPayment {
            type(p) <- paymentType(type(b));

            partner(p) <- vendor(b);
            company(p) <- company(b);

            ready(p) <- TRUE;

            paid(b, p) <- n;
        }

        APPLY;
    }
}

prepayment 'Предоплата' = DATA NUMERIC[14,2] (Bill);

pay 'В оплату' (Bill b) {
    APPLY;
    IF canceled() THEN RETURN;

    DIALOG dialogNewPayment OBJECTS n = (OVERRIDE prepayment(b) IF NOT paid(b), left(b)) INPUT DO {
        IF n > amount(b) OR n <= 0 THEN
            MESSAGE 'Неправильно введена сумма';
        ELSE {
            createPayment(b, n);
            IF ready(b) THEN dataStatus(b) <- BillStatus.ready;
            APPLY;
        }
    }
}

FORM inputBillPaymentOrderFiles 'Добавление платежных поручений'
    OBJECTS b = Bill PANEL

    OBJECTS of = BillFile
    PROPERTIES(of) READONLYIF readonly(b) name, extension, description
    PROPERTIES(of) READONLY nameUser, dateTime
    PROPERTIES(of) GRID open, DELETE
    FILTERS bill(of) = b,
        type(of) = TypeFile.paymentOrder

    PROPERTIES(b) uploadPaymentOrder DRAW of TOOLBAR
    PROPERTIES inputFile = '' CUSTOM 'inputFile' ON CHANGE {
        INPUT f = JSON DO
            IMPORT JSON FROM f FIELDS() STRING name, STRING extension, STRING data DO
                NEW uof = BillFile {
                    bill(uof) <- b;
                    file(uof) <- decode(data, 'base64');
                    name(uof) <- name;
                    extension(uof) <- extension;
                    type(uof) <- TypeFile.paymentOrder;
                    lockChangeType(uof) <- TRUE;
                }
    }
;

DESIGN inputBillPaymentOrderFiles {
    size = (800, 600);
    BOX(of) {
        caption = '';
        MOVE PROPERTY(inputFile);
    }
}

doPayment 'Оплачено' (Bill b) {
    APPLY;
    IF canceled() THEN RETURN;
    
    NEWSESSION {
        LOCAL count = INTEGER();
        count() <- OVERRIDE (GROUP SUM 1 IF bill(BillFile f) == b AND type(f) = TypeFile.paymentOrder), 0;
        DIALOG inputBillPaymentOrderFiles OBJECTS b = b FLOAT NESTEDSESSION;
        IF (GROUP SUM 1 IF bill(BillFile f) == b AND type(f) = TypeFile.paymentOrder) > count() THEN {
            done(OutgoingPayment p) <- TRUE WHERE paid(b, p) AND NOT done(p);
        }
        IF paidDone(b) >= amount(b) THEN dataStatus(b) <- BillStatus.done;
        APPLY;
    }
}

FORM inputBillInvoiceFiles 'Добавление счетов'
    OBJECTS b = Bill PANEL

    OBJECTS of = BillFile
    PROPERTIES(of) READONLYIF readonly(b) name, extension, description
    PROPERTIES(of) READONLY nameUser, dateTime
    PROPERTIES(of) GRID open, DELETE
    FILTERS bill(of) = b,
        type(of) = TypeFile.invoice

    PROPERTIES(b) uploadInvoice DRAW of TOOLBAR
    PROPERTIES inputFile = '' CUSTOM 'inputFile' ON CHANGE {
        INPUT f = JSON DO
            IMPORT JSON FROM f FIELDS() STRING name, STRING extension, STRING data DO
                NEW uof = BillFile {
                    bill(uof) <- b;
                    file(uof) <- decode(data, 'base64');
                    name(uof) <- name;
                    extension(uof) <- extension;
                    type(uof) <- TypeFile.invoice;
                    lockChangeType(uof) <- TRUE;
                    onApproval(b) <- TRUE;
                    dataStatus(b) <- BillStatus.onApproval;
                }
    }
;

DESIGN inputBillInvoiceFiles {
    size = (800, 600);
    BOX(of) {
        caption = '';
        MOVE PROPERTY(inputFile);
    }
}

changeStatus (Bill b, BillStatus s) +{
    IF s = BillStatus.ready THEN  NEWSESSION {
        IF status(b) = BillStatus.onApproval THEN {
            pay(b);
        }
    }
}

changeStatus (Bill b, BillStatus s) +{
    IF s = BillStatus.ready THEN  NEWSESSION {
        IF status(b) = BillStatus.partiallyPaid THEN {
            pay(b);
        }
    }
}

changeStatus (Bill b, BillStatus s) +{
    IF s = BillStatus.onApproval THEN  NEWSESSION {
        IF status(b) = BillStatus.draft THEN {
            DIALOG inputBillInvoiceFiles OBJECTS b = b FLOAT;
        }

        IF status(b) = BillStatus.ready THEN {
            DELETE OutgoingPayment p WHERE type(p) == paymentType(type(b)) AND partner(p) == vendor(b) AND company(p) == company(b) AND ready(p) AND paid(b, p) AND NOT done(p);
            dataStatus(b) <- s;
        }
        
        APPLY;
    }
}

changeStatus (Bill b, BillStatus s) +{
    IF s = BillStatus.onApproval THEN  NEWSESSION {
        IF status(b) = BillStatus.partiallyPaid THEN {
            DIALOG inputBillInvoiceFiles OBJECTS b = b FLOAT;
            status(b) <- BillStatus.partiallyPaid;
            APPLY;
        }        
    }
}

changeStatus (Bill b, BillStatus s) +{
    IF s = BillStatus.done THEN  NEWSESSION {
        doPayment(b);
        
        IF done(b) THEN dataStatus(b) <- s;
        IF partiallyPaid(b) THEN dataStatus(b) <- BillStatus.partiallyPaid;
        APPLY;
    }
}

showStatusRule(Bill b, BillStatus s) += WHEN status(b) = BillStatus.draft AND s = BillStatus.onApproval THEN TRUE;
showStatusRule(Bill b, BillStatus s) += WHEN status(b) = BillStatus.onApproval AND s = BillStatus.ready THEN TRUE;
showStatusRule(Bill b, BillStatus s) += WHEN status(b) = BillStatus.ready AND s = BillStatus.done THEN TRUE;
showStatusRule(Bill b, BillStatus s) += WHEN status(b) = BillStatus.partiallyPaid AND s = BillStatus.onApproval THEN TRUE;
showStatusRule(Bill b, BillStatus s) += WHEN status(b) = BillStatus.partiallyPaid AND s = BillStatus.ready THEN TRUE;
showStatusRule(Bill b, BillStatus s) += WHEN status(b) = BillStatus.partiallyPaid AND s = BillStatus.canceled THEN TRUE;
showStatusRule(Bill b, BillStatus s) += WHEN status(b) = BillStatus.done AND s = BillStatus.canceled THEN TRUE;

hidePrevStatusRule(BillStatus s) += WHEN s = BillStatus.partiallyPaid THEN TRUE;
hidePrevStatusRule(BillStatus s) += WHEN s = BillStatus.done THEN TRUE;

EXTEND FORM billCustom
    PROPERTIES(b) READONLY paid, left
    PROPERTIES(b) prepayment
    
    OBJECTS p = OutgoingPayment
    PROPERTIES dateTime(p) READONLY, 'Cумма платежа' = paid(b, p), paid 'Оплачено' = done(p), edit 'Редактировать' = EDIT(p) GRID, DELETE(p) GRID
    FILTERS paid(b, p)
;

DESIGN billCustom {
    header {        
        headerLeft {
            MOVE PROPERTY(prepayment(b)) { fontSize = 24; }
        }
        NEW payments {
            fill = 1;
            alignment = END;
            caption = 'Платежи';
            MOVE GRID(p) {
                height = 100;
                PROPERTY (paid) {charWidth = 8;}
                PROPERTY (edit) {charWidth = 14;}
            }
            REMOVE BOX(p);
            MOVE PROPERTY(paid(b)) { fontSize = 24; alignment = STRETCH; }
            MOVE PROPERTY(left(b)) { fontSize = 24; alignment = STRETCH; }
        }
    }
}

showToOnApprovalDefault 'По умолчанию показывать счета На утверждении' = DATA BOOLEAN (UserRole);
showToOnApprovalDefault (User u) = GROUP SUM 1 IF showToOnApprovalDefault(UserRole r) AND has(u, r);
showToReadyDefault 'По умолчанию показывать счета В оплату' = DATA BOOLEAN (UserRole);
showToReadyDefault (User u) = GROUP SUM 1 IF showToReadyDefault(UserRole r) AND has(u, r);
showToPayDefault 'По умолчанию показывать счета К оплате' =  DATA BOOLEAN (UserRole);
showToPayDefault (User u) = GROUP SUM 1 IF showToPayDefault(UserRole r) AND has(u, r);
showDoneDefault 'По умолчанию показывать счета Оплачено' = DATA BOOLEAN (UserRole);
showDoneDefault (User u) = GROUP SUM 1 IF showDoneDefault(UserRole r) AND has(u, r);

EXTEND FORM securityPolicy
    PROPERTIES(ur) PANEL showToOnApprovalDefault, showToReadyDefault, showToPayDefault, showDoneDefault
;
DESIGN securityPolicy {
    bill {
        MOVE PROPERTY(showToOnApprovalDefault(ur));
        MOVE PROPERTY(showToReadyDefault(ur));
        MOVE PROPERTY(showToPayDefault(ur));
        MOVE PROPERTY(showDoneDefault(ur));
    }
}

defaultFilter 'По умолчанию' (Bill b, User u) =
    (showToReadyDefault(u) AND status(b) = BillStatus.draft) OR 
    (showToOnApprovalDefault(u) AND status(b) = BillStatus.onApproval) OR 
    (showToPayDefault(u) AND status(b) = BillStatus.ready) OR
    (showDoneDefault(u) AND status(b) = BillStatus.done) OR
    NOT (showToReadyDefault(u) OR showToOnApprovalDefault(u) OR showToPayDefault(u) OR showDoneDefault(u));

@billDashboardStatus(partiallyPaid, 'Частично оплачен');

EXTEND FORM billDashboard
    PROPERTIES newLegalEntityBill() DRAW draftLE TOOLBAR
    PROPERTIES newIndividualBill() DRAW draftI TOOLBAR
    
    PROPERTIES(onApprovalLE) left
    PROPERTIES(onApprovalI) left
    
    PROPERTIES(partiallyPaidLE) left, toPay, paidDone
    PROPERTIES(partiallyPaidI) left, toPay, paidDone
    
    PROPERTIES(readyLE) left, toPay, paidDone
    PROPERTIES(readyI) left, toPay, paidDone
    
    PROPERTIES(doneLE) left, toPay, paidDone
    PROPERTIES(doneI) left, toPay, paidDone
;

EXTEND FORM billDashboard
    PROPERTIES openBillPaymentOrder(partiallyPaidLE) GRID AFTER openFilesInvoice(partiallyPaidLE)
    PROPERTIES openBillPaymentOrder(readyLE) GRID AFTER openFilesInvoice(readyLE)
    PROPERTIES openBillPaymentOrder(canceledLE) GRID AFTER openFilesInvoice(canceledLE)
    PROPERTIES openBillPaymentOrder(doneLE) GRID AFTER openFilesInvoice(doneLE)
    PROPERTIES openBillPaymentOrder(partiallyPaidI) GRID AFTER openFilesInvoice(partiallyPaidI)
    PROPERTIES openBillPaymentOrder(readyI) GRID AFTER openFilesInvoice(readyI)
    PROPERTIES openBillPaymentOrder(canceledI) GRID AFTER openFilesInvoice(canceledI)
    PROPERTIES openBillPaymentOrder(doneI) GRID AFTER openFilesInvoice(doneI)
;

//
changePrevStatus(Bill b, BillStatus s) +{
    FOR paid(b, OutgoingPayment p) IF active(p) AND s = BillStatus.onApproval AND NOT done(p) DO cancel(p);
}