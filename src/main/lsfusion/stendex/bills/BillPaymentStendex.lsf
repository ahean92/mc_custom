MODULE BillPaymentStendex;

REQUIRE BillStendex, BillDebt, BillPayment, OutgoingPaymentDone;

NAMESPACE Invoicing;

//paid 'Оплачено' = DATA NUMERIC[16,3] (Bill); // пока как DATA свойство
//toPay 'К оплате' (Bill b) = amount(b) (-) paid(b);

paidDone 'Оплачено' (Bill b) = GROUP SUM paid(b, OutgoingPayment p) IF active(p) AND done(p) MATERIALIZED;
toPay 'К оплате' (Bill b) = GROUP SUM paid(b, OutgoingPayment p) IF active(p) AND NOT done(p) MATERIALIZED;

countPaidAll (IncomingDebt p) = GROUP SUM 1 IF paid(p, OutgoingDebt d);
CONSTRAINT DROPPED(Bill b IS Bill) AND PREV(countPaidAll(b)) MESSAGE 'Запрещено удалять счет, по которому есть платежи';

partiallyPaid(Bill b) = b IS Bill AND paid(b) AND NOT toPay(b) AND NOT done(b) MATERIALIZED;
EXTEND CLASS BillStatus {
    partiallyPaid 'Частично оплачен'
}
status(Bill b) += WHEN partiallyPaid(b) THEN BillStatus.partiallyPaid;
color (BillStatus s) += WHEN s = BillStatus.partiallyPaid THEN RGB(187,242,210);

toReady (Bill b) = (b IS Bill AND NOT ready(b)) OR partiallyPaid(b) MATERIALIZED;

calcReady (Bill b) = (b IS Bill AND paid(b)) OR done(b);
WHEN GOAFTER ready[Bill], done[Bill] CHANGED(calcReady(Bill b)) OR CHANGED(ready(b)) DO 
    ready(b) <- calcReady(b);

calcDone (Bill b) = paidDone(b) = amount(b);
WHEN GOAFTER done[Bill] CHANGED(calcDone(Bill b)) OR CHANGED(done(b)) DO 
    done(b) <- calcDone(b);

FORM dialogNewPayment 'Новая оплата'
    OBJECTS n = NUMERIC[14,2] PANEL
    PROPERTIES(n) 'Введите сумму :' = VALUE
;

WHEN SETCHANGED(paid(OutgoingPayment p)) DO amount(p) <- paid(p);

createPayment (Bill b, NUMERIC[14,2] n) {
    NEWSESSION {
        NEW p = OutgoingPayment {
            type(p) <- paymentType(type(b));

            partner(p) <- vendor(b);
            company(p) <- company(b);

            ready(p) <- TRUE;

            paid(b, p) <- n;
        }

        APPLY;
    }
}

prepayment 'Предоплата' = DATA NUMERIC[14,2] (Bill);

pay 'В оплату' (Bill b) {
    APPLY;
    IF canceled() THEN RETURN;

    DIALOG dialogNewPayment OBJECTS n = (OVERRIDE prepayment(b) IF NOT paid(b), left(b)) INPUT DO {
        IF n > amount(b) OR n <= 0 THEN
            MESSAGE 'Неправильно введена сумма';
        ELSE 
            createPayment(b, n);
    }
}

doPayment 'Оплачено' (Bill b) {
    APPLY;
    IF canceled() THEN RETURN;
    
    NEWSESSION {
        INPUT uf = NAMEDFILE DO NEW uof = BillFile {
            bill(uof) <- b;
            file(uof) <- RAWFILE(uf);
            name(uof) <- name(uf);
            extension(uof) <- extension(uf);
            type(uof) <- TypeFile.paymentOrder;
        }
        done(OutgoingPayment p) <- TRUE WHERE paid(b, p) AND NOT done(p);
        APPLY;
    }
}

EXTEND FORM billCustom
    PROPERTIES(b) READONLY paid, left
    PROPERTIES(b) SHOWIF toReady(b) pay
    PROPERTIES(b) SHOWIF toPay(b) doPayment
    PROPERTIES(b) prepayment
    
    OBJECTS p = OutgoingPayment
    PROPERTIES dateTime(p) READONLY, 'Cумма платежа' = paid(b, p), paid 'Оплачено' = done(p), edit 'Редактировать' = EDIT(p) GRID, DELETE(p) GRID
    FILTERS paid(b, p)
;

DESIGN billCustom {
    header {
        statusActions {
            MOVE PROPERTY(pay(b));
            MOVE PROPERTY(doPayment(b));
        }
        headerLeft {
            MOVE PROPERTY(prepayment(b)) { fontSize = 24; }
        }
        NEW payments {
            fill = 1;
            alignment = END;
            caption = 'Платежи';
            MOVE GRID(p) {
                height = 100;
                PROPERTY (paid) {charWidth = 8;}
                PROPERTY (edit) {charWidth = 14;}
            }
            REMOVE BOX(p);
            MOVE PROPERTY(paid(b)) { fontSize = 24; alignment = STRETCH; }
            MOVE PROPERTY(left(b)) { fontSize = 24; alignment = STRETCH; }
        }
    }
}

showToReadyDefault 'По умолчанию показывать счета В оплату' = DATA BOOLEAN (UserRole);
showToReadyDefault (User u) = GROUP SUM 1 IF showToReadyDefault(UserRole r) AND has(u, r);
showToPayDefault 'По умолчанию показывать счета К оплате' =  DATA BOOLEAN (UserRole);
showToPayDefault (User u) = GROUP SUM 1 IF showToPayDefault(UserRole r) AND has(u, r);
showDoneDefault 'По умолчанию показывать счета Оплачено' = DATA BOOLEAN (UserRole);
showDoneDefault (User u) = GROUP SUM 1 IF showDoneDefault(UserRole r) AND has(u, r);

EXTEND FORM securityPolicy
    PROPERTIES(ur) PANEL showToReadyDefault, showToPayDefault, showDoneDefault
;
DESIGN securityPolicy {
    roleApplicationSettings {
        MOVE PROPERTY(showToReadyDefault(ur));
        MOVE PROPERTY(showToPayDefault(ur));
        MOVE PROPERTY(showDoneDefault(ur));
    }
}

defaultFilter 'По умолчанию' (Bill b, User u) =
    (showToReadyDefault(u) AND toReady(b)) OR (showToPayDefault(u) AND toPay(b)) OR (showDoneDefault(u) AND done(b))
    OR NOT (showToReadyDefault(u) OR showToPayDefault(u) OR showDoneDefault(u));

EXTEND FORM billDashboard
    PROPERTIES(bl) READONLY left, toPay, paidDone
    PROPERTIES(bl) SHOWIF toReady(bl) pay
    PROPERTIES(bl) SHOWIF toPay(bl) doPayment
    FILTERGROUP statusL
        FILTER 'По умолчанию' defaultFilter(bl, currentUser()) DEFAULT
        FILTER 'Формирование' toReady(bl)
        FILTER 'К оплате' toPay(bl)
        FILTER 'Оплачено' done(bl)
        FILTER 'Частично оплачен' partiallyPaid(bl)
        FILTER 'Отменен' canceled(bi)
    

    PROPERTIES(bi) READONLY left, toPay, paidDone
    PROPERTIES(bi) SHOWIF toReady(bi) pay
    PROPERTIES(bi) SHOWIF toPay(bi) doPayment
    FILTERGROUP statusI
        FILTER 'По умолчанию' defaultFilter(bi, currentUser()) DEFAULT
        FILTER 'Формирование' toReady(bi)
        FILTER 'К оплате' toPay(bi)
        FILTER 'Оплачено' done(bi)
        FILTER 'Частично оплачен' partiallyPaid(bi)
        FILTER 'Отменен' canceled(bi)
;

DESIGN billDashboard {
    markLegalEntity {
        MOVE PROPERTY(pay(bl));
        MOVE PROPERTY(doPayment(bl));
    }
    markIndividual {
        MOVE PROPERTY(pay(bi));
        MOVE PROPERTY(doPayment(bi));
    }
}