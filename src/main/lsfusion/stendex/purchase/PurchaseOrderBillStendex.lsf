MODULE PurchaseOrderBillStendex;

REQUIRE PurchaseOrderBill, BillPaymentStendex, PurchaseOrderStendex, ProjectDashboardStendex;

NAMESPACE Purchase;

order = DATA Purchase.Order (Bill) INDEXED;
numberOrder 'Purchase order' (Bill b) = number(order(b));

lastBill (Purchase.Order o) = GROUP LAST Bill b ORDER b BY order(b);

overFillAmountProjects (Bill b) + {
    IF order(b) THEN {
        FOR in(b, Project p) DO {
            amount(b,p) <- GROUP SUM amount(OrderLine l) IF order(l) = order(b) AND project(l) == p;
        }
    } ELSE {
        FOR Project p == (GROUP MAX Project pp IF in(b,pp)) DO {
            amount(b,p) <- amount(b);
        }
    }
}

fill (Bill b, Order o) + {
    order(b) <- o;
    
    FOR order(OrderFile f) == o AND type(f) = TypeFile.invoice NEW bf = BillFile DO {
        bill(bf) <- b;
        file(bf) <- file(f);
        name(bf) <- name(f);
        extension(bf) <- extension(f);
        type(bf) <- Invoicing.TypeFile.invoice;
        lockChangeType(bf) <- TRUE;
    }
}

newBill 'Добавить' (Order o) {
    NEWSESSION {
        NEW nb = Bill {
            ready(nb) <- TRUE;
            type(nb) <- billType(type(o));

            company(nb) <- company(o);

            vendor(nb) <- vendor(o);
            vendorReference(nb) <- vendorReference(o);
            note(nb) <- note(o);

            currency(nb) <- currency(o);
            
            paymentTerms(nb) <- paymentTerms(o);

            FOR order(OrderLine ol) = o AND toBillOrdered(ol) > 0
                NEW bl = BillLine DO {
                bill(bl) <- nb;
                item(bl) <- item(ol);
                description(bl) <- description(ol);
                quantity(bl) <- toBillOrdered(ol);
                price(bl) <- price(ol);
                orderLine(bl) <- ol;

                fill(bl, ol);
            }

            fill(nb, o);

            executeLocalEvents();
            FOR bill(BillLine bl) = nb DO {
                in(bl, Tax t) <- in(orderLine(bl), t);
            }
            SHOW billCustom OBJECTS b = nb DOCKED;
        }
    }
}

EXTEND FORM bill
    PROPERTIES(b) numberOrder READONLYIF readonly(b)
;

DESIGN bill {
    headerRight {
        MOVE PROPERTY(numberOrder(b));
    }
}


EXTEND FORM bills
    PROPERTIES(b) READONLY numberOrder
;

autoUploaded = DATA BOOLEAN (OrderFile);

lockManualAdded (TypeFile t) = t == TypeFile.invoice OR t == TypeFile.paymentOrder OR t = TypeFile.consignment;

CONSTRAINT LOCAL SETCHANGED (type(OrderFile f)) AND lockManualAdded(type(f)) AND NOT autoUploaded(f) CHECKED BY type[OrderFile]
    MESSAGE 'Запрещено вручную прикреалять файлы этого типа!';

uploadConsigment 'Накладная' (Order o){
    INPUT uf = NAMEDFILE DO NEW uof = OrderFile {
        order(uof) <- o;
        file(uof) <- RAWFILE(uf);
        name(uof) <- name(uf);
        extension(uof) <- extension(uf);
        autoUploaded(uof) <- TRUE;
        type(uof) <- TypeFile.consignment;
    }
} IMAGE 'add.png' CHANGEKEY 'INSERT' HIDE;

FORM inputOrderConsigments 'Добавление накладных'
    OBJECTS o = Order PANEL

    OBJECTS of = OrderFile
    PROPERTIES(of) READONLYIF readonly(o) name, extension, description
    PROPERTIES(of) READONLY nameUser, dateTime
    PROPERTIES(of) GRID open, DELETE READONLYIF readonly(o)
    FILTERS order(of) = o,
            type(of) = TypeFile.consignment

    PROPERTIES(o) uploadConsigment DRAW of TOOLBAR READONLYIF readonly(o)
    PROPERTIES inputFile = '' CUSTOM 'inputFile' ON CHANGE {
        INPUT f = JSON DO
            IMPORT JSON FROM f FIELDS() STRING name, STRING extension, STRING data DO
                IF NOT readonly(o) THEN NEW uof = OrderFile {
                    order(uof) <- o;
                    file(uof) <- decode(data, 'base64');
                    name(uof) <- name;
                    extension(uof) <- extension;
                    autoUploaded(uof) <- TRUE;
                    type(uof) <- TypeFile.consignment;
                }
    }
;

DESIGN inputOrderConsigments {
    size = (800, 600);
    BOX(of) {
        caption = '';
        MOVE PROPERTY(inputFile);
    }
}

newConsigment 'Накладная' (Order o) {
    NESTEDSESSION {
        DIALOG inputOrderConsigments OBJECTS o = o FLOAT;
    }
} IMAGE 'add.png' CHANGEKEY 'INSERT' HIDE;

uploadInvoice 'Счет' (Purchase.Order o){
    INPUT uf = NAMEDFILE DO NEW uof = OrderFile {
        order(uof) <- o;
        file(uof) <- RAWFILE(uf);
        name(uof) <- name(uf);
        extension(uof) <- extension(uf);
        autoUploaded(uof) <- TRUE;
        type(uof) <- TypeFile.invoice;
        IF NOT lastBill(o) THEN NEW nb = Bill{
            ready(nb) <- TRUE;
            type(nb) <- billType(type(o));

            company(nb) <- company(o);

            vendor(nb) <- vendor(o);
            vendorReference(nb) <- vendorReference(o);
            note(nb) <- CONCAT ' ', 'Счет по заказу', number(o), 'от  ' + date(o), 'поставщик' + nameVendor(o);
            in(nb, Project p) <- TRUE IF inOrder(p, o);
            amount(nb, Project p) <- GROUP SUM amount(OrderLine l) IF order(l) = o AND project(l) == p;
            currency(nb) <- currency(o);

            paymentTerms(nb) <- paymentTerms(o);

            FOR order(OrderLine ol) = o AND toBillOrdered(ol) > 0
                NEW bl = BillLine DO {
                bill(bl) <- nb;
                item(bl) <- item(ol);
                description(bl) <- description(ol);
                quantity(bl) <- toBillOrdered(ol);
                price(bl) <- price(ol);
                orderLine(bl) <- ol;

                fill(bl, ol);
            }

            fill(nb, o);

            executeLocalEvents();
            FOR bill(BillLine bl) = nb DO {
                in(bl, Tax t) <- in(orderLine(bl), t);
            }
            changeStatus(o, OrderStatus.review);
        }
    }
} IMAGE 'add.png' CHANGEKEY 'INSERT' HIDE;

FORM inputOrderInvoices 'Добавление счетов'
    OBJECTS o = Order PANEL

    OBJECTS of = OrderFile
    PROPERTIES(of) READONLYIF readonly(o) name, extension, description
    PROPERTIES(of) READONLY nameUser, dateTime
    PROPERTIES(of) GRID open, DELETE READONLYIF readonly(o)
    FILTERS order(of) = o,
            type(of) = TypeFile.invoice

    PROPERTIES(o) uploadInvoice DRAW of TOOLBAR READONLYIF readonly(o)
    PROPERTIES inputFile = '' CUSTOM 'inputFile' ON CHANGE {
        INPUT f = JSON DO
            IMPORT JSON FROM f FIELDS() STRING name, STRING extension, STRING data DO
                IF NOT readonly(o) THEN NEW uof = OrderFile {
                    order(uof) <- o;
                    file(uof) <- decode(data, 'base64');
                    name(uof) <- name;
                    extension(uof) <- extension;
                    autoUploaded(uof) <- TRUE;
                    type(uof) <- TypeFile.invoice;
                    IF NOT lastBill(o) THEN NEW nb = Bill{
                        ready(nb) <- TRUE;
                        type(nb) <- billType(type(o));

                        company(nb) <- company(o);

                        vendor(nb) <- vendor(o);
                        vendorReference(nb) <- vendorReference(o);
                        note(nb) <- CONCAT ' ', 'Счет по заказу', number(o), 'от  ' + date(o), 'поставщик' + nameVendor(o);
                        in(nb, Project p) <- TRUE IF inOrder(p, o);
                        amount(nb, Project p) <- GROUP SUM amount(OrderLine l) IF order(l) = o AND project(l) == p;
                        currency(nb) <- currency(o);

                        paymentTerms(nb) <- paymentTerms(o);

                        FOR order(OrderLine ol) = o AND toBillOrdered(ol) > 0
                            NEW bl = BillLine DO {
                            bill(bl) <- nb;
                            item(bl) <- item(ol);
                            description(bl) <- description(ol);
                            quantity(bl) <- toBillOrdered(ol);
                            price(bl) <- price(ol);
                            orderLine(bl) <- ol;

                            fill(bl, ol);
                        }

                        fill(nb, o);

                        executeLocalEvents();
                        FOR bill(BillLine bl) = nb DO {
                            in(bl, Tax t) <- in(orderLine(bl), t);
                        }
                        dataStatus(o) <- OrderStatus.review;
                    }
                }
    }
;

DESIGN inputOrderInvoices {
    size = (800, 600);
    BOX(of) {
        caption = '';
        MOVE PROPERTY(inputFile);
    }
}

newInvoice 'Счет' (Order o) {
    NESTEDSESSION {
        DIALOG inputOrderInvoices OBJECTS o = o FLOAT;
    }
} IMAGE 'add.png' CHANGEKEY 'INSERT' HIDE;

EXTEND FORM Purchase.order
    PROPERTIES (o) newInvoice TOOLBAR DRAW of SHOWIF inProject(o)
    PROPERTIES (o) newConsigment TOOLBAR DRAW of 
        SHOWIF inProject(o) AND (status(o) = OrderStatus.awaitingDelivery OR status(o) = OrderStatus.delivered);
;

DESIGN Purchase.order {
    details  {
        MOVE BOX(bi) {
            caption = badged('Bills', countBills(o));
        }
    }
}
pay 'В оплату' (Purchase.Order o){
    pay(lastBill(o));
}
doPayment 'Оплачено' (Purchase.Order o){
    doPayment(lastBill(o));
}

left 'Осталось' (Purchase.Order o) = left(lastBill(o));
toPay 'К оплате' (Purchase.Order o) = toPay(lastBill(o));
paidDone 'Оплачено' (Purchase.Order o) = paidDone(lastBill(o));

EXTEND FORM Purchase.orders
    PROPERTIES(o) SHOWIF toReady(lastBill(o)) pay
    PROPERTIES(o) SHOWIF toPay(lastBill(o)) doPayment
    PROPERTIES (o) left, toPay, paidDone

    PROPERTIES(l) READONLY SHOWIF showLines() nameProject
    PROPERTIES(l) READONLY SHOWIF (showLines() AND confirmed(o)) billed BACKGROUND NOT billed(l) = quantity(l)
    PROPERTIES(l) READONLY SHOWIF (showLines() AND confirmed(o)) paid BACKGROUND NOT paid(l) = quantity(l)
;

DESIGN orders{
    BOX(o){
        NEW header FIRST {
            horizontal = TRUE;
            alignment = STRETCH;
            MOVE TOOLBAR(o);
            NEW orderActions {
                fill = 1;
                NEW payAction {
                    horizontal = TRUE;
                    alignment = END;
                    MOVE PROPERTY (pay(o));
                    MOVE PROPERTY (doPayment(o));
                }
            }
        }
    }
}
EXTEND FORM order
    PROPERTIES paidDone(o)
;
DESIGN order{
    total{
        MOVE PROPERTY (paidDone(o));
    }
}

EXTEND FORM projectDashboard
    PROPERTIES(deliveredLine) READONLY SHOWIF (showLines() AND confirmed(delivered)) billed BACKGROUND NOT billed(deliveredLine) = quantity(deliveredLine)
    PROPERTIES(deliveredLine) READONLY SHOWIF (showLines() AND confirmed(delivered)) paid BACKGROUND NOT paid(deliveredLine) = quantity(deliveredLine)
;

META dashboardActionPayment(st)
    EXTEND FORM projectDashboard
        PROPERTIES (st) SHOWIF toReady(lastBill(st)) pay
        PROPERTIES(st) SHOWIF toPay(lastBill(st)) doPayment
        PROPERTIES (st) left, toPay, paidDone
    ;
    DESIGN projectDashboard{
        action##st{
            MOVE PROPERTY (pay(st));
            MOVE PROPERTY (doPayment(st));
        }
    }
END;

@dashboardActionPayment(review);
@dashboardActionPayment(inPayment);
@dashboardActionPayment(partiallyPaid);


WHEN (SETCHANGED(lastBill(Purchase.Order o)) OR SETCHANGED(status(lastBill(o)))) AND status(lastBill(o)) == BillStatus.ready
    DO changeStatus(o, OrderStatus.inPayment);

WHEN (SETCHANGED(lastBill(Purchase.Order o)) OR SETCHANGED(status(lastBill(o)))) AND status(lastBill(o)) == BillStatus.partiallyPaid
    DO changeStatus(o, OrderStatus.partiallyPaid);

WHEN (SETCHANGED(lastBill(Purchase.Order o)) OR SETCHANGED(status(lastBill(o)))) AND status(lastBill(o)) == BillStatus.done
    DO changeStatus(o, OrderStatus.awaitingDelivery);

CONSTRAINT LOCAL CHANGED(changedLines(Order o)) AND ready(lastBill(o)) MESSAGE 'Нельзя изменять документ со счетом в оплате';

WHEN SETCHANGED(item(Purchase.OrderLine l)) AND lastBill(order(l)) DO {
    item(BillLine bl) <- item(l) WHERE orderLine(bl) == l;
}
WHEN SETCHANGED(quantity(Purchase.OrderLine l)) AND lastBill(order(l)) DO {
    quantity(BillLine bl) <- quantity(l) WHERE orderLine(bl) == l;
    untaxedAmount(BillLine bl) <- NUMERIC[14,2](quantity(bl) * price(bl)) WHERE orderLine(bl) == l;
}
WHEN SETCHANGED(price(Purchase.OrderLine l)) AND lastBill(order(l)) DO {
    price(BillLine bl) <- price(l) WHERE orderLine(bl) == l;
    untaxedAmount(BillLine bl) <- NUMERIC[14,2](quantity(bl) * price(bl)) WHERE orderLine(bl) == l;
}

FORM billOrderDashboard 'Счета на товары'
    OBJECTS b = Bill BACKGROUND backgroundColor(b)
    PROPERTIES(b) READONLY number, date, imagedNameStatus BACKGROUND colorStatus(b), overNameVendor,
        items, nameProjects, note, overNameRepresentative, amount
    PROPERTIES(b) 'Счет' = openFiles GRID, cancel SHOWIF status(b) = BillStatus.draft
    PROPERTIES(b) NEWSESSION editBillCustom, DELETE
    FILTERS order(b),
        representative(b) = currentUser() OR showAllInvoices(currentUser()) OR NOT representative(b)
    
    PROPERTIES() Invoicing.nameFilterProject, Invoicing.nameFilterRepresentative, nameFilterStatus, filterUrgent
    FILTERS in(b, Invoicing.filterProject()) OR NOT Invoicing.filterProject(),
        representative(b) = Invoicing.filterRepresentative() OR NOT Invoicing.filterRepresentative(),
        status(b) = filterStatus() OR NOT filterStatus(),
        isUrgent(b) OR NOT filterUrgent()
;

DESIGN billOrderDashboard {
    OBJECTS {
        NEW filters {
            caption = '';
            border = FALSE;
            alignment = CENTER;
            horizontal = TRUE;
            MOVE PROPERTY (nameFilterProject());
            MOVE PROPERTY (nameFilterRepresentative());
            MOVE PROPERTY (nameFilterStatus());
            MOVE PROPERTY (filterUrgent());
        }
        NEW pane{
            fill = 1;
            NEW billOrder {
                caption = 'Счета на товары';
                fill = 1;
                NEW headerOrder {
                    horizontal = TRUE;
                    alignment = STRETCH;
                    MOVE TOOLBAR(b);
                    NEW actionsOrder {
                        fill = 1;
                        NEW markOrder {
                            horizontal = TRUE;
                            alignment = END;
                            MOVE PROPERTY (cancel(b));
                        }
                    }
                }
                MOVE BOX(b) { caption = ''; };
            }
        }
    }
}

NAVIGATOR {
    dashboard {
        NEW billOrderDashboard;
    }
}

EXTEND FORM billOrderDashboard
    PROPERTIES(b) READONLY left, toPay, paidDone
    PROPERTIES(b) SHOWIF toReady(b) pay
    PROPERTIES(b) SHOWIF toPay(b) doPayment
    FILTERGROUP status
        FILTER 'По умолчанию' defaultFilter(b, currentUser()) DEFAULT
        FILTER 'Формирование' toReady(b)
        FILTER 'К оплате' toPay(b)
        FILTER 'Оплачено' done(b)
        FILTER 'Частично оплачен' partiallyPaid(b)
        FILTER 'Отменен' canceled(b)
;

DESIGN billOrderDashboard {
    markOrder {
        MOVE PROPERTY(pay(b));
        MOVE PROPERTY(doPayment(b));
    }
}

readonly(OrderFile f) += WHEN autoUploaded(f) THEN TRUE;

WHEN SETCHANGED (BillFile f IS BillFile) AND type(f) = Invoicing.TypeFile.paymentOrder AND order(bill(f)) DO NEW of = OrderFile{
    autoUploaded(of) <- TRUE;
    type(of) <- Purchase.TypeFile.paymentOrder;
    order(of) <- order(bill(f));
    file(of) <- RAWFILE(file(f));
    name(of) <- name(f);
    extension(of) <- extension(f);
}

leftDaysToPay (Order o) = daysBetweenDates(payBeforeDate(o),currentDate()) IF NOT done(lastBill(o));
urgency 'Срочность' (Order o) = CASE
    WHEN leftDaysToPay(o) < 0 THEN 'просрочен'
    WHEN leftDaysToPay(o) == 0 OR leftDaysToPay(o) == 1 THEN 'срочный'
    WHEN leftDaysToPay(o) > 1 AND leftDaysToPay(o) <= 3 THEN 'средний'
    WHEN leftDaysToPay(o) > 3 AND leftDaysToPay(o) <= 7 THEN 'нормальный';

EXTEND FORM order
    PROPERTIES(o) urgency
;
DESIGN order {
    billInformation {
        MOVE PROPERTY(urgency(o));
    }
}

EXTEND FORM orders
    PROPERTIES(o) READONLY urgency
;

EXTEND FORM projectDashboard
    PROPERTIES (draft) READONLY BACKGROUND colorStatus(draft) urgency AFTER payBeforeDate(draft)
    PROPERTIES (review) READONLY BACKGROUND colorStatus(review) urgency AFTER payBeforeDate(review)
    PROPERTIES (inPayment) READONLY BACKGROUND colorStatus(inPayment) urgency AFTER payBeforeDate(inPayment)
    PROPERTIES (partiallyPaid) READONLY BACKGROUND colorStatus(partiallyPaid) urgency AFTER payBeforeDate(partiallyPaid)
    PROPERTIES (awaitingDelivery) READONLY BACKGROUND colorStatus(awaitingDelivery) urgency AFTER payBeforeDate(awaitingDelivery)
    PROPERTIES (delivered) READONLY BACKGROUND colorStatus(delivered) urgency AFTER payBeforeDate(delivered)
    PROPERTIES (canceled) READONLY BACKGROUND colorStatus(canceled) urgency AFTER payBeforeDate(canceled)
    PROPERTIES (closed) READONLY BACKGROUND colorStatus(closed) urgency AFTER payBeforeDate(closed)
;

WHEN LOCAL SETCHANGED (type(Order o)) AND lastBill(o) DO type(lastBill(o)) <- billType(type(o));