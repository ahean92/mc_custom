MODULE ProjectKanbanStendex;

REQUIRE Project, ProjectDashboardStendex, ProjectExhibition;

PRIORITY MasterData;

NAMESPACE ProjectManagement;

color 'Цвет' = DATA STRING (ProjectStatus);

budget (ProjectStatus s) = GROUP SUM budget(Project p) IF status(p) = s AND [FILTER projects.p](p);

projectStatuses () = JSON FROM id = ProjectStatus s, name(s), color(s), budget = toChar(budget(s), '999 999 999 ₽') WHERE s IS ProjectStatus AND NOT closed(s);
projectEmployees () = JSON FROM id = Employee e, name(e) WHERE e IS Employee;

order = DATA LONG (CustomUser, Project);
currentOrder (Project t) =  order(currentUser(), t);

createProject() {
    INPUT id = LONG DO {
        NEW tt = Project {
            FOR LONG(ProjectStatus s AS ProjectStatus) = id DO
                status(tt) <- s;
            order(currentUser(), tt) <- -LONG(tt);
        }
    }
}

budgetString (Project p) = toChar(budget(p), '999 999 999 ₽');
interval (Project p) = CONCAT ' - ', toChar(startDate(p), 'DD Mon YY'), toChar(endDate(p), 'DD Mon YY');
dateInstallation (Project p) = toChar(installationStartDate(p), 'dd.mm.YY');
dateExcibition (Project p) = toChar(startDateExhibition(p), 'dd.mm.YY');
dateDemolition (Project p) = toChar(demolitionStartDate(p), 'dd.mm.YY');

editAllProjects 'Редактировать все проекты' =  DATA BOOLEAN (UserRole);
editAllProjects (User u) = GROUP SUM 1 IF editAllProjects(UserRole r) AND has(u, r);

EXTEND FORM securityPolicy PROPERTIES(ur) PANEL editAllProjects;
DESIGN securityPolicy {
    roleApplicationSettings { MOVE PROPERTY(editAllProjects(ur)); }
}

readonlyCurrentUser(Project p) = NOT manager(p) = currentUser() AND NOT editAllProjects(currentUser()); 

EXTEND FORM projects
    OBJECTS pp = Project CUSTOM 'projectKanban'
    OPTIONS JSON FROM employees = projectEmployees(), statuses = projectStatuses()
    
    PROPERTIES(pp)
        readonly = readonlyCurrentUser,
        namePartner,
        budget = budgetString,
        installDate = dateInstallation,
        deinstallDate = dateDemolition,
        runDate = dateExcibition,
        nameExhibition = name,
        nameManager,
        status ON CHANGE {
            INPUT l = LONG DO
                FOR LONG(ProjectStatus ts AS ProjectStatus) = l DO
                    status(pp) <- ts;
                    ELSE
                status(pp) <- NULL;
        },
        currentOrder ON CHANGE {
            INPUT ord = INTEGER DO order(currentUser(), pp) <- ord;
        }

    ORDERS status(pp), currentOrder(pp)

    FILTERS [FILTER projects.p](pp)

;

DESIGN projects {
    tabbedPane {
        NEW kanban {
            caption = 'Kanban';
            MOVE GRID(pp) {
            }
            REMOVE BOX(pp);
        }
    }
}

// change interval
onWebClientInit() + {
    onWebClientInit('dragula.js') <- 1;
    onWebClientInit('dragula.css') <- 1;
    onWebClientInit('projectkanban.js') <- 2;
    onWebClientInit('projectkanban.css') <- 2;
}

projectFilters = DATA LOCAL BOOLEAN ();
switchProjectFilters() { projectFilters() <- NOT projectFilters(); }
EXTEND FORM projects
    PROPERTIES () switchProjectFilters
;

DESIGN projects {
    TOOLBARRIGHT {
        MOVE PROPERTY (switchProjectFilters()) {
            caption = IF showPanel() THEN 'Скрыть фильтры' ELSE 'Фильтры';
        }
    }
    rightPane { showIf = projectFilters(); }
}
