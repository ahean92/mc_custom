MODULE ProjectDashboardStendex;

REQUIRE PurchaseOrderStendex, ProjectPurchaseOrderStendex;

editingOn 'Редактировать' = DATA LOCAL NESTED BOOLEAN (Project);
WHEN LOCAL SET(Project p IS Project) DO editingOn(p) <- TRUE;

readonly(Project p) += WHEN p IS Project AND NOT editingOn(p) THEN TRUE;

editAllProjects 'Редактировать все проекты' =  DATA BOOLEAN (UserRole);
editAllProjects (User u) = GROUP SUM 1 IF editAllProjects(UserRole r) AND has(u, r);

EXTEND FORM securityPolicy PROPERTIES(ur) PANEL editAllProjects;

DESIGN securityPolicy {
    roleApplicationSettings {
        tabbed = TRUE;
        NEW project {
            caption = 'Project';
            lines = 3;
            MOVE PROPERTY(editAllProjects(ur));
        }
    }
}

readonlyCurrentUser(Project p) = NOT manager(p) = currentUser() AND NOT editAllProjects(currentUser());

budget 'Бюджет' = DATA NUMERIC[15,2] (Project);

EXTEND FORM projects
    PROPERTIES (p) READONLY budget
;
DESIGN projects{
    REMOVE PROPERTY (startDate(p));
    REMOVE PROPERTY (endDate(p));
    
    REMOVE PROPERTY(formOk());
    REMOVE PROPERTY(formClose());
}

EXTEND FORM project
    PROPERTIES (p) READONLYIF readonly(p) budget
    OBJECTS pf = Purchase.OrderFile
    PROPERTIES READONLY 'Заказ' = number(order(pf))
    PROPERTIES(pf) READONLYIF readonly(p) name, extension, description
    PROPERTIES(pf) READONLY nameUser, dateTime
    PROPERTIES(pf) GRID open, DELETE
    FILTERS project(order(pf)) = p

    PROPERTIES(p) editingOn DISABLEIF readonlyCurrentUser(p)
;
countPurchaseFile (Project p) = GROUP SUM 1 IF project(order(Purchase.OrderFile f)) = p;

DESIGN project{
    REMOVE PROPERTY (startDate(p));
    REMOVE PROPERTY (endDate(p));
    header {
        NEW headerExtra{
            caption = '';
            border = FALSE;
        }
        headerLeft{
            fill = 1;
            MOVE PROPERTY (budget(p));
        }
        PROPERTY (namePartner(p)) { caption = 'Клиент'; }
    }
    details {
        NEW filesTotal{
            showIf = NULL;//скрываем тк добавлена новая вкладка по типам
            caption = badged('Файлы', countFiles(p) (+) countPurchaseFile(p));
            tabbed = TRUE;
            NEW fp{
                caption = badged('По проекту', countFiles(p) );
                MOVE BOX (of){
                    caption = '';
                }
            }
            NEW pof{
                caption = badged('По заказам', countPurchaseFile(p));
                MOVE BOX(pf){
                    caption = '';
                }
            }
        }
    }
}
NAVIGATOR {
    dashboard{
        MOVE projects;
    }
}
//дашборд

filterProject = DATA LOCAL NESTED Project ();
nameFilterProject 'Проект' = name(filterProject());

filterRepresentative = DATA LOCAL NESTED Employee ();
nameFilterRepresentative 'Наш представитель' = MasterData.name(filterRepresentative());

FORM projectDashboard 'Закупка материалов' 
    PROPERTIES () nameFilterProject, nameFilterRepresentative
    OBJECTS request = ManufacturingOrder
    PROPERTIES (request) READONLY nameProject, 'Дата' = scheduledDate, namePriority, number, nameType, nameConsumedItem, nameStatus,  nameResponsible
    PROPERTIES (request) NEWSESSION EDIT
    FILTERS project(request) = filterProject() OR NOT filterProject()
    FILTERS responsible(request) = filterRepresentative() OR NOT filterRepresentative()
;
//
filteredRequest(ManufacturingOrder o) = FILTER projectDashboard.request;
countFilteredRequest = GROUP SUM 1 IF filteredRequest(ManufacturingOrder o);

DESIGN projectDashboard{
    OBJECTS{
        class = '';
        border = FALSE;
        NEW filters {
            caption = '';
            alignment = STRETCH;
            NEW select{
                caption = '';
                border = FALSE;
                alignment = CENTER;
                horizontal = TRUE;
                MOVE PROPERTY (nameFilterProject());
                MOVE PROPERTY (nameFilterRepresentative());
                MOVE PROPERTY (formRefresh());
            }
            NEW action{
                caption = '';
            }
        }
        NEW tab{
            fill = 1;
            alignment = STRETCH;
            tabbed = TRUE;
            NEW request{
                caption = badged('Заявки', countFilteredRequest());
                MOVE BOX (request){
                    caption = '';
                    PROPERTY (nameType(request)){
                        charWidth = 10;
                    }
                    PROPERTY (namePriority(request)) {valueAlignment = CENTER; charWidth = 6;}
                };
            }
        }
        REMOVE TOOLBARBOX;
    }
}


META dashboardStatus(st, capt)
    EXTEND FORM projectDashboard
        OBJECTS st = Purchase.Order
        PROPERTIES (st) READONLY BACKGROUND colorStatus(st) nameCompany, nameProjects, number, date, nameRepresentative, scheduledDateTime, nameVendor, note, untaxedAmount, amount
        PROPERTIES (st) NEWSESSION EDIT
        PROPERTIES fileInvoice(st) AFTER nameVendor(st) ON CHANGE { openInvoice(st); }
        FILTERS status(st) = Purchase.OrderStatus.st
        FILTERS inOrder(filterProject(), st) OR NOT filterProject()
        FILTERS representative(st) = filterRepresentative() OR NOT filterRepresentative()
        
        OBJECTS st##Status = Purchase.OrderStatus
        PROPERTIES (st, st##Status ) NEWSESSION changeStatus COLUMNS (st##Status) HEADER captionButton(st##Status) BACKGROUND dataColor(st##Status) SHOWIF countOrderLine(st)
        FILTERS showStatus(st, st##Status)

        PROPERTIES show###st##Lines = showLines() TOOLBAR DRAW st
        
        OBJECTS st##Line = Purchase.OrderLine
        PROPERTIES(st##Line) READONLY SHOWIF showLines() index, nameItem, description, nameUom, idBarCodeItem, idItem, referenceItem, quantity, price, untaxedAmount, amount, taxes, nameProject
        FILTERS order(st##Line) = st
    ;

    filtered###st(Purchase.Order o) = FILTER projectDashboard.st;
    countFiltered###st = GROUP SUM 1 IF filtered###st(Purchase.Order o);
    DESIGN projectDashboard{
        tab{
            NEW st{
                caption =  badged(capt, countFiltered###st());
                NEW action##st{
                    caption = '';
                    alignment = END;
                    horizontal = TRUE;
                    MOVE PROPERTY (changeStatus(st, st##Status ));
                }
                MOVE BOX(st) {
                    caption = ''; 
                    PROPERTY (fileInvoice(st)) { charWidth = 7; caption = 'Счет'; }
                    TOOLBARBOX(st) {
                        MOVE PROPERTY(show###st##Lines) BEFORE TOOLBARRIGHT(st);
                    }
                }
                MOVE BOX(st##Line);
            }
        }
    }
    
END 
@dashboardStatus(draft, 'Формирование');
@dashboardStatus(review, 'На рассмотрении');
@dashboardStatus(inPayment, 'В оплате');
@dashboardStatus(partiallyPaid, 'Частично оплачен');
@dashboardStatus(awaitingDelivery, 'Ждем доставки');
@dashboardStatus(delivered, 'Доставлен');
@dashboardStatus(canceled, 'Отменен');

@dashboardStatus(closed, 'Закрыт');


NAVIGATOR {
    dashboard{
        NEW projectDashboard;
    }
}

