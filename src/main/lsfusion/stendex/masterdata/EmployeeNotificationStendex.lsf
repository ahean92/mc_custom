MODULE EmployeeNotificationStendex;

REQUIRE EmployeeStendex, PurchaseOrderStendex, BillStendex, PurchaseOrderBillStendex;

NAMESPACE Notifications;

CLASS TypeEmailNotification {
    createOrder 'Cоздание заказа',
    createBill 'Cоздание счета',
    paidOrder 'Оплата заказа',
    paidBill 'Оплата счета'
}

notifite 'Уведомлять' = DATA BOOLEAN (TypeEmailNotification, Employee);
name 'Наименование' (TypeEmailNotification en) = staticCaption(en);

dataEmail 'Email' = DATA ISTRING[400] (TypeEmailNotification, Employee) CHARWIDTH 20 REGEXP '[-!#-\'*+/-9=?A-Z^-~]+(\\.[-!#-\'*+/-9=?A-Z^-~]+)*@[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?(\\.[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?)+' '<html>{authentication.email.contact.incorrect}</html>';
email 'Email' (TypeEmailNotification en, Employee e) = OVERRIDE dataEmail(en, e), email[Partner](e) IF en IS TypeEmailNotification;

EXTEND FORM employee
    OBJECTS en = TypeEmailNotification
    PROPERTIES (en) READONLY name
    PROPERTIES (en, e) notifite FIRST, email
    ORDERS name(en)
;

DESIGN employee {
    details {
        tabbed = TRUE;
        fill = 3;
        NEW notifications {
            fill = 1;
            tabbed = TRUE;
            caption = 'Уведомления';
            MOVE BOX(en) { caption = 'Email'; }
        }
    }
}

sentDateTime 'Отправлено уведомление'  = DATA DATETIME (TypeEmailNotification, Order);
sentDateTime 'Отправлено уведомление'  = DATA DATETIME (TypeEmailNotification, Bill);

condionSendEmail 'Отправить' = ABSTRACT VALUE BOOLEAN (TypeEmailNotification, Order, Employee);
condionSendEmail 'Отправить' = ABSTRACT VALUE BOOLEAN (TypeEmailNotification, Bill, Employee);

condionSendEmail(TypeEmailNotification en, Order o, Employee e) += e IS Employee AND o IS Order AND en == TypeEmailNotification.createOrder;
condionSendEmail(TypeEmailNotification en, Bill b, Employee e) += e IS Employee AND b IS Bill AND en == TypeEmailNotification.createBill;
condionSendEmail(TypeEmailNotification en, Order o, Employee e) += representative(o) == e AND en == TypeEmailNotification.paidOrder;
condionSendEmail(TypeEmailNotification en, Bill b, Employee e) += representative(b) == e AND NOT sentDateTime(en, b) AND en == TypeEmailNotification.paidBill;

notificationEmails (TypeEmailNotification en, Order o) = GROUP CONCAT email(en, Employee e) IF notifite(en, e) AND condionSendEmail(en, o, e), ',' ORDER e;
notificationEmails (TypeEmailNotification en, Bill b) = GROUP CONCAT email(en, Employee e) IF notifite(en, e) AND condionSendEmail(en, b, e), ',' ORDER e;

bodyNotificationCreate (Order o) = CONCAT '\n', 'Создан заказ', '№' + number(o), 'Поставщик ' + nameVendor(o), 'Автор ' + nameRepresentative(o), 'Сумма ' + amount(o);
attachFileCreate(Order o) = GROUP MAX OrderFile of  IF type(of) == Purchase.TypeFile.invoice BY order(of);

sendEmailNotificationCreate 'Отправить' (TypeEmailNotification en, Order o) {
    EMAIL
        SUBJECT (CONCAT  ' ', 'Добавлен новый заказ на утверждение', '№' + number(o), toChar(date(o), 'dd.MM.yyyy'))
        TO notificationEmails(en, o)
        BODY bodyNotificationCreate(o)
        ATTACH file(file(attachFileCreate(o)), extension(attachFileCreate(o))) NAME name(attachFileCreate(o));
    APPLY;
    IF canceled() THEN RETURN;

    sentDateTime(en, o) <- currentDateTime();
    APPLY;
}

bodyNotificationCreate (Bill b) = CONCAT '\n', 'Создан счет', '№' + number(b), 'Поставщик ' + nameVendor(b), 'Автор ' + nameRepresentative(b), 'Сумма ' + amount(b);
attachFileCreate(Bill b) = GROUP MAX BillFile of IF type(of) == Invoicing.TypeFile.invoice BY bill(of);

sendEmailNotificationCreate 'Отправить' (TypeEmailNotification en, Bill b) {
    EMAIL
        SUBJECT (CONCAT  ' ', 'Добавлен новый счет на утверждение', 'Тип ' + nameType(b), '№' + number(b), toChar(date(b), 'dd.MM.yyyy'))
        TO notificationEmails(en, b)
        BODY bodyNotificationCreate(b)
        ATTACH file(file(attachFileCreate(b)), extension(attachFileCreate(b))) NAME name(attachFileCreate(b));
    APPLY;
    IF canceled() THEN RETURN;

    sentDateTime(en, b) <- currentDateTime();
    APPLY;
}

bodyNotificationPaid (Order o) = CONCAT '\n', 'Оплачен заказ', '№' + number(o), 'Поставщик ' + nameVendor(o), 'Автор ' + nameRepresentative(o), 'Сумма ' + amount(o);
attachFilePaid(Order o) = GROUP MAX OrderFile of  IF type(of) == Purchase.TypeFile.paymentOrder BY order(of);

sendEmailNotificationPaid 'Отправить' (TypeEmailNotification en, Order o) {
    EMAIL
        SUBJECT (CONCAT  ' ', 'Оплачен заказ на утверждение', '№' + number(o), toChar(date(o), 'dd.MM.yyyy'))
        TO notificationEmails(en, o)
        BODY bodyNotificationPaid(o)
        ATTACH file(file(attachFilePaid(o)), extension(attachFilePaid(o))) NAME name(attachFilePaid(o));
    APPLY;
    IF canceled() THEN RETURN;

    sentDateTime(en, o) <- currentDateTime();
    APPLY;
}

bodyNotificationPaid (Bill b) = CONCAT '\n', 'Оплачен счет', '№' + number(b), 'Поставщик ' + nameVendor(b), 'Автор ' + nameRepresentative(b), 'Сумма ' + amount(b);
attachFilePaid(Bill b) = GROUP MAX BillFile of IF type(of) == Invoicing.TypeFile.paymentOrder BY bill(of);

sendEmailNotificationPaid 'Отправить' (TypeEmailNotification en, Bill b) {
    EMAIL
        SUBJECT (CONCAT  ' ', 'Оплачен счет на утверждение', 'Тип ' + nameType(b), '№' + number(b), toChar(date(b), 'dd.MM.yyyy'))
        TO notificationEmails(en, b)
        BODY bodyNotificationPaid(b)
        ATTACH file(file(attachFilePaid(b)), extension(attachFilePaid(b))) NAME name(attachFilePaid(b));
    APPLY;
    IF canceled() THEN RETURN;

    sentDateTime(en, b) <- currentDateTime();
    APPLY;
}

needSendEmail = DATA BOOLEAN(TypeEmailNotification, Order);
needSendEmail = DATA BOOLEAN(TypeEmailNotification, Bill);

WHEN SETCHANGED(Order o IS Order)
    DO needSendEmail(TypeEmailNotification.createOrder, o) <- TRUE;

WHEN SETCHANGED(Bill b IS Bill)
    DO needSendEmail(TypeEmailNotification.createBill, b) <- TRUE;

WHEN SETCHANGED(status(Order o)) AND (status(o) == OrderStatus.awaitingDelivery) // status(o) == OrderStatus.partiallyPaid OR
    DO needSendEmail(TypeEmailNotification.paidOrder, o) <- TRUE;

WHEN SETCHANGED(status(Bill b)) AND (status(b) == BillStatus.done) // status(b) == BillStatus.partiallyPaid
    DO needSendEmail(TypeEmailNotification.paidBill, b) <- TRUE;

condionSendEmail 'Отправить' = ABSTRACT VALUE BOOLEAN (TypeEmailNotification, Order);
condionSendEmail 'Отправить' = ABSTRACT VALUE BOOLEAN (TypeEmailNotification, Bill);

condionSendEmail(TypeEmailNotification en, Order o) += needSendEmail(en, o) AND NOT sentDateTime(en, o) AND en == TypeEmailNotification.createOrder;
condionSendEmail(TypeEmailNotification en, Bill b) += needSendEmail(en, b) AND billService(type(b)) AND NOT sentDateTime(en, b) AND en == TypeEmailNotification.createBill;
condionSendEmail(TypeEmailNotification en, Order o) += needSendEmail(en, o) AND NOT sentDateTime(en, o) AND en == TypeEmailNotification.paidOrder;
condionSendEmail(TypeEmailNotification en, Bill b) += needSendEmail(en, b) AND billService(type(b)) AND NOT sentDateTime(en, b) AND en == TypeEmailNotification.paidBill;

sendEmailNotification(DATE dFrom) {
    FOR date(Order o) >= dFrom AND condionSendEmail(TypeEmailNotification.createOrder, o) DO sendEmailNotificationCreate(TypeEmailNotification.createOrder, o);
    FOR date(Bill b) >= dFrom AND condionSendEmail(TypeEmailNotification.createBill, b) DO sendEmailNotificationCreate(TypeEmailNotification.createBill, b);
    FOR date(Order o) >= dFrom AND condionSendEmail(TypeEmailNotification.paidOrder, o) DO sendEmailNotificationPaid(TypeEmailNotification.paidOrder, o);
    FOR date(Bill b) >= dFrom AND condionSendEmail(TypeEmailNotification.paidBill, b) AND billService(type(b)) DO sendEmailNotificationPaid(TypeEmailNotification.paidBill, b);
}