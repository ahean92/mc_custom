MODULE ProjectDashboardStendex;

REQUIRE PurchaseOrderStendex, ProjectPurchaseOrderStendex, ProjectStendex, PurchaseOrderFilter;

editingOn 'Редактировать' = DATA LOCAL NESTED BOOLEAN (Project);
WHEN LOCAL SET(Project p IS Project) DO editingOn(p) <- TRUE;

readonly(Project p) += WHEN p IS Project AND NOT editingOn(p) THEN TRUE;

editAllProjects 'Редактировать все проекты' =  DATA BOOLEAN (UserRole);
editAllProjects (User u) = GROUP SUM 1 IF editAllProjects(UserRole r) AND has(u, r);

EXTEND FORM securityPolicy PROPERTIES(ur) PANEL editAllProjects;

DESIGN securityPolicy {
    roleApplicationSettings {
        tabbed = TRUE;
        NEW project {
            caption = 'Project';
            lines = 3;
            MOVE PROPERTY(editAllProjects(ur));
        }
    }
}

readonlyCurrentUser(Project p) = NOT manager(p) = currentUser() AND NOT editAllProjects(currentUser());

budget 'Бюджет' = DATA NUMERIC[15,2] (Project);

EXTEND FORM projects
    PROPERTIES (p) READONLY budget
;
DESIGN projects{
    REMOVE PROPERTY (startDate(p));
    REMOVE PROPERTY (endDate(p));
    
    REMOVE PROPERTY(formOk());
    REMOVE PROPERTY(formClose());
}

EXTEND FORM project
    PROPERTIES (p) READONLYIF readonly(p) budget
    OBJECTS pf = Purchase.OrderFile
    PROPERTIES READONLY 'Заказ' = number(order(pf))
    PROPERTIES(pf) READONLYIF readonly(p) name, extension, description
    PROPERTIES(pf) READONLY nameUser, dateTime
    PROPERTIES(pf) GRID open, DELETE
    FILTERS project(order(pf)) = p

    PROPERTIES(p) editingOn DISABLEIF readonlyCurrentUser(p)
;
countPurchaseFile (Project p) = GROUP SUM 1 IF project(order(Purchase.OrderFile f)) = p;

DESIGN project{
    REMOVE PROPERTY (startDate(p));
    REMOVE PROPERTY (endDate(p));
    header {
        NEW headerExtra{
            caption = '';
            border = FALSE;
        }
        headerLeft{
            fill = 1;
            MOVE PROPERTY (budget(p));
        }
        PROPERTY (namePartner(p)) { caption = 'Клиент'; }
    }
    details {
        NEW filesTotal{
            showIf = NULL;//скрываем тк добавлена новая вкладка по типам
            caption = badged('Файлы', countFiles(p) (+) countPurchaseFile(p));
            tabbed = TRUE;
            NEW fp{
                caption = badged('По проекту', countFiles(p) );
                MOVE BOX (of){
                    caption = '';
                }
            }
            NEW pof{
                caption = badged('По заказам', countPurchaseFile(p));
                MOVE BOX(pf){
                    caption = '';
                }
            }
        }
    }
}
NAVIGATOR {
    dashboard{
        MOVE projects;
    }
}
//дашборд

filterProject = DATA LOCAL NESTED Project ();
nameFilterProject 'Проект' = name(filterProject());

filterRepresentative = DATA LOCAL NESTED Employee ();
nameFilterRepresentative 'Наш представитель' = MasterData.overName(filterRepresentative());

showRequestTab 'Отображать вкладку Заявки' = DATA BOOLEAN (UserRole);
showRequestTab (User u) = GROUP SUM 1 IF showRequestTab(UserRole r) AND has(u, r);
showRequestTab = showRequestTab(currentUser());

showOrderTab 'Отображать вкладку Заказы' = DATA BOOLEAN (UserRole);
showOrderTab (User u) = GROUP SUM 1 IF showOrderTab(UserRole r) AND has(u, r);
showOrderTab = showOrderTab(currentUser());

EXTEND FORM securityPolicy
    PROPERTIES(ur) PANEL showRequestTab, showOrderTab
;
DESIGN securityPolicy {
    roleApplicationSettings {
        tabbed = TRUE;
        NEW projectDashboard {
            caption = 'Закупка материалов';
            lines = 3;
            MOVE PROPERTY(showRequestTab(ur));
            MOVE PROPERTY(showOrderTab(ur));
        }
    }
}

FORM projectDashboard 'Закупка материалов' 
    PROPERTIES () nameFilterProject, nameFilterRepresentative
    
    OBJECTS request = ManufacturingOrder
    PROPERTIES (request) READONLY nameProject, 'Дата' = scheduledDate, namePriority, number, nameType, nameConsumedItem, nameStatus, overNameResponsible
    PROPERTIES (request) NEWSESSION NEW, EDIT, DELETE
    FILTERS project(request) = filterProject() OR NOT filterProject()
    FILTERS responsible(request) = filterRepresentative() OR NOT filterRepresentative()

    FILTERGROUP draft
        FILTER 'Draft' status(request) = ManufacturingOrderStatus.draft DEFAULT

    PROPERTIES requestOrder 'Порядок' = LONG(request) SHOWIF NULL
    ORDERS requestOrder DESC
    
    PROPERTIES showRequestLines = Purchase.showLines() TOOLBAR DRAW request

    OBJECTS requestLine = ConsumedLine
    PROPERTIES(requestLine) READONLY SHOWIF Purchase.showLines() idItem, nameItem, nameUom, description, 'Количество' = toConsume
    PROPERTIES(requestLine) SHOWIF Purchase.showLines() link ON CHANGE { open(link(requestLine)); } AFTER description(requestLine)
    FILTERS manufacturingOrder(requestLine) = request

    PROPERTIES showRequestPanelControl = showPanelControl() PANEL DRAW request
    
    OBJECTS requestDates = INTERVAL[DATE] BEFORE request PANEL NULL
    PROPERTIES requestFilterDates 'Date interval' = VALUE(requestDates)
    FILTERS NOT scheduledDate(request) < from(requestDates), NOT scheduledDate(request) > to(requestDates)
    
    
    OBJECTS order = Purchase.Order
    PROPERTIES (order) READONLY nameCompany, nameProjects, number, date, overNameRepresentative, scheduledDateTime, nameVendor, note, payBeforeDate, untaxedAmount, amount
    PROPERTIES(order) READONLY imagedNameStatus BACKGROUND colorStatus(order) BEFORE nameCompany(order)
    PROPERTIES(order) NEWSESSION NEW, EDIT, DELETE
    FILTERS inOrder(filterProject(), order) OR NOT filterProject()
    FILTERS representative(order) = filterRepresentative() OR NOT filterRepresentative()

    FILTERGROUP statusCustom
        FILTER 'Draft' status(order) = OrderStatus.draft
        FILTER 'Отменен' status(order) = OrderStatus.canceled
        FILTER 'В оплате' status(order) = OrderStatus.inPayment
        FILTER 'Оплачено частитчно' status(order) = OrderStatus.partiallyPaid
        FILTER 'Ждем доставки' status(order) = OrderStatus.awaitingDelivery
        FILTER 'Закрыт' status(order) = OrderStatus.closed
        FILTER 'На рассмотрении' status(order) = OrderStatus.review
        FILTER 'Доставлен' status(order) = OrderStatus.delivered

    PROPERTIES orderOrder 'Порядок' = LONG(order) SHOWIF NULL
    ORDERS orderOrder DESC
    
    PROPERTIES showOrderLines = Purchase.showLines() TOOLBAR DRAW order

    OBJECTS orderLine = Purchase.OrderLine
    PROPERTIES(orderLine) READONLY SHOWIF Purchase.showLines() index, nameItem, description, nameUom, idBarCodeItem, idItem, referenceItem, quantity, price, untaxedAmount, amount, taxes, nameProject
    FILTERS order(orderLine) = order

    PROPERTIES showOrderPanelControl = showPanelControl() PANEL DRAW order

    OBJECTS orderDates = INTERVAL[DATE] BEFORE order PANEL NULL
    PROPERTIES orderFilterDates 'Date interval' = VALUE(orderDates)
    FILTERS NOT date(order) < from(orderDates), NOT date(order) > to(orderDates)

    PROPERTIES() nameOrderType, nameOrderLocation, nameOrderVendor
    FILTERS type(order) = orderType() OR NOT orderType()
    FILTERS location(order) = orderLocation() OR NOT orderLocation()
    FILTERS vendor(order) = orderVendor() OR NOT orderVendor()
;

//
filteredRequest(ManufacturingOrder o) = FILTER projectDashboard.request;
countFilteredRequest = GROUP SUM 1 IF filteredRequest(ManufacturingOrder o);

filteredOrder(Order o) = FILTER projectDashboard.order;
countFilteredOrder = GROUP SUM 1 IF filteredOrder(Order o);

DESIGN projectDashboard {
    OBJECTS{
        class = '';
        border = FALSE;
        NEW filters {
            caption = '';
            alignment = STRETCH;
            NEW select{
                caption = '';
                border = FALSE;
                alignment = CENTER;
                horizontal = TRUE;
                MOVE PROPERTY (nameFilterProject());
                MOVE PROPERTY (nameFilterRepresentative());
                MOVE PROPERTY (formRefresh());
            }
            NEW action{
                caption = '';
            }
        }
        NEW tab{
            fill = 1;
            alignment = STRETCH;
            tabbed = TRUE;
            NEW request {
                caption = badged('Заявки', countFilteredRequest());
                showIf = showRequestTab();
                fill = 1;
                horizontal = TRUE;
                NEW requestTables {
                    fill = 100;
                    NEW requestActions {
                        caption = '';
                        alignment = END;
                        horizontal = TRUE;
                        MOVE PROPERTY (showRequestPanelControl) {
                            caption = IF showPanel() THEN 'Скрыть фильтры' ELSE 'Фильтры';
                        }
                    }
                    MOVE BOX (request){
                        caption = '';
                        PROPERTY (nameType(request)){
                            charWidth = 10;
                        }
                        PROPERTY (namePriority(request)) {valueAlignment = CENTER; charWidth = 6;}
                        TOOLBARBOX(request) {
                            MOVE PROPERTY(showRequestLines) BEFORE TOOLBARRIGHT(request);
                        }
                    };
                    MOVE BOX(requestLine);
                }
                NEW requestFilters {
                    caption = 'Filters';
                    showIf = showPanel();
                    alignment = STRETCH;
                    width = 200;
                    fill = 1;
                    MOVE FILTERGROUPS(request) {
                        horizontal = FALSE;
                        alignment = STRETCH;
                    }
                    MOVE PROPERTY(requestFilterDates);
                }
            }
            NEW order {
                caption = badged('Заказы', countFilteredOrder());
                showIf = showOrderTab();
                fill = 1;
                horizontal = TRUE;
                NEW orderTables {
                    fill = 1000;
                    NEW orderActions {
                        caption = '';
                        alignment = END;
                        horizontal = TRUE;
                        MOVE PROPERTY (showOrderPanelControl) {
                            caption = IF showPanel() THEN 'Скрыть фильтры' ELSE 'Фильтры';
                        }
                    }
                    MOVE BOX (order){
                        caption = '';
                        TOOLBARBOX(order) {
                            MOVE PROPERTY(showOrderLines) BEFORE TOOLBARRIGHT(order);
                        }
                    };
                    MOVE BOX(orderLine);
                }
                NEW orderFilters {
                    caption = 'Filters';
                    showIf = showPanel();
                    alignment = STRETCH;
                    width = 200;
                    fill = 1;
                    MOVE FILTERGROUPS(order) {
                        horizontal = FALSE;
                        alignment = STRETCH;
                    }
                    MOVE PROPERTY(orderFilterDates);
                    MOVE PROPERTY(nameOrderType()) { caption = ''; placeholder = 'Type'; };
                    MOVE PROPERTY(nameOrderLocation()) { caption = ''; placeholder = 'Location'; };
                    MOVE PROPERTY(nameOrderVendor()) { caption = ''; placeholder = 'Vendor'; };
                }   
                
            }
        }
        REMOVE TOOLBARBOX;
    }
}


META dashboardStatus(st, capt)
    show###st##Tab 'Отображать вкладку '##capt = DATA BOOLEAN (UserRole);
    show###st##Tab (User u) = GROUP SUM 1 IF show###st##Tab(UserRole r) AND has(u, r);
    show###st##Tab = show###st##Tab(currentUser());

    EXTEND FORM securityPolicy
        PROPERTIES(ur) PANEL show###st##Tab
    ;
    DESIGN securityPolicy {
        projectDashboard {
            MOVE PROPERTY(show###st##Tab(ur));
        }
    }
    
    EXTEND FORM projectDashboard
        OBJECTS st = Purchase.Order
        PROPERTIES (st) READONLY BACKGROUND colorStatus(st) nameCompany, nameProjects, number, date, overNameRepresentative, scheduledDateTime, nameVendor, note, payBeforeDate, untaxedAmount, amount
        PROPERTIES (st) NEWSESSION EDIT
        PROPERTIES fileInvoice(st) AFTER nameVendor(st) ON CHANGE { openInvoice(st); }
        FILTERS status(st) = Purchase.OrderStatus.st
        FILTERS inOrder(filterProject(), st) OR NOT filterProject()
        FILTERS representative(st) = filterRepresentative() OR NOT filterRepresentative()

        PROPERTIES st##Order 'Порядок' = LONG(st) SHOWIF NULL
        ORDERS st##Order DESC
        
        OBJECTS st##Status = Purchase.OrderStatus
        PROPERTIES (st, st##Status ) NEWSESSION changeStatus COLUMNS (st##Status) HEADER captionButton(st##Status) BACKGROUND dataColor(st##Status) SHOWIF countOrderLine(st)
        FILTERS showStatus(st, st##Status)

        PROPERTIES show###st##Lines = Purchase.showLines() TOOLBAR DRAW st
        
        OBJECTS st##Line = Purchase.OrderLine
        PROPERTIES(st##Line) READONLY SHOWIF Purchase.showLines() index, nameItem, description, nameUom, idBarCodeItem, idItem, referenceItem, quantity, price, untaxedAmount, amount, taxes, nameProject
        FILTERS order(st##Line) = st
    ;

    filtered###st(Purchase.Order o) = FILTER projectDashboard.st;
    countFiltered###st = GROUP SUM 1 IF filtered###st(Purchase.Order o);
    DESIGN projectDashboard{
        tab{
            NEW st{
                caption =  badged(capt, countFiltered###st());
                showIf = show###st##Tab();
                NEW action##st{
                    caption = '';
                    alignment = END;
                    horizontal = TRUE;
                    MOVE PROPERTY (changeStatus(st, st##Status ));
                }
                MOVE BOX(st) {
                    caption = ''; 
                    PROPERTY (fileInvoice(st)) { charWidth = 7; caption = 'Счет'; }
                    TOOLBARBOX(st) {
                        MOVE PROPERTY(show###st##Lines) BEFORE TOOLBARRIGHT(st);
                    }
                }
                MOVE BOX(st##Line);
            }
        }
    }
    
END 
@dashboardStatus(draft, 'Формирование');
@dashboardStatus(review, 'На рассмотрении');
@dashboardStatus(inPayment, 'В оплате');
@dashboardStatus(partiallyPaid, 'Частично оплачен');
@dashboardStatus(awaitingDelivery, 'Ждем доставки');
@dashboardStatus(delivered, 'Доставлен');
@dashboardStatus(canceled, 'Отменен');

@dashboardStatus(closed, 'Закрыт');


NAVIGATOR {
    dashboard{
        NEW projectDashboard;
    }
}

@defineProjectHistoryAttr(budget,budget,'Изменен бюджет');
