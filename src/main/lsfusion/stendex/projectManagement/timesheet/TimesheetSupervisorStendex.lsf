MODULE TimesheetSupervisorStendex;

REQUIRE TimesheetSupervisor, EmployeeStendex, TimeEntryStendex, TimeEntryHoursStendex, UtilsStendex, Image;

PRIORITY MasterData;

NAMESPACE ProjectManagement;

hours (Employee e, TimeEntryHours h, DATE dFrom, DATE dTo) = 
    GROUP SUM hours(TimeEntry te) IF h == timeEntryHours(te) AND NOT date(te) < dFrom AND NOT date(te) > dTo AND employee(te) == e AND 
        (project(te) = timesheetProject() OR NOT timesheetProject());

hours 'Hours' (Employee e, TimeEntryHours h, INTERVAL[DATE] dates) = hours(e, h, from(dates), to(dates));

smallPhoto = DATA IMAGEFILE (Employee);
dataSmallEmployeePhotoSize 'Размер уменьшенного фото сотрудника по горизонтали' = DATA INTEGER () PREREAD;
smallEmployeePhotoSize 'Размер уменьшенного фото сотрудника по горизонтали' () = OVERRIDE dataSmallEmployeePhotoSize(), 100;

WHEN SETCHANGED (photo(Employee e)) AND smallEmployeePhotoSize() OR SETCHANGED (smallEmployeePhotoSize()) AND photo(e) DO {
    TRY {
        resizeImage(photo(e), smallEmployeePhotoSize(), NULL);
        smallPhoto(e) <- resizedImage();
    }
}

WHEN DROPPED (photo(Employee e)) DO {
    smallPhoto(e) <- NULL;
}

EXTEND FORM options PROPERTIES() smallEmployeePhotoSize;

DESIGN options {
    commons {
        MOVE PROPERTY(smallEmployeePhotoSize());
    }
}

hours 'Часов' (INTERVAL[DATE] dates, Employee e) = GROUP SUM hours(e, TimeEntryHours h, dates);

FORM dialogEmployeeTimeEntryHours 'Employee'    
    OBJECTS dates = INTERVAL[DATE] PANEL NULL    
    OBJECTS e = Employee PANEL
    PROPERTIES (e) READONLY lastName, firstName, middleName, smallPhoto, passportInformation, tariff
    PROPERTIES (e) openScanFile
       
    OBJECTS h = TimeEntryHours
    PROPERTIES(h) name
    PROPERTIES(e, h, dates) hours
    FILTERS hours(e, h, dates)

    PROPERTIES (dates, e) READONLY hours DRAW h TOOLBAR
;

DESIGN dialogEmployeeTimeEntryHours {
    OBJECTS {
        NEW header {
            alignment = STRETCH;
            horizontal = TRUE;
            fill = 1;

            NEW photo {
                fill = 1;
                MOVE PROPERTY(smallPhoto(e)) {
                    caption = '';
                }
            }

            NEW info {                
                fill = 2;
                MOVE PROPERTY(lastName(e));
                MOVE PROPERTY(firstName(e));
                MOVE PROPERTY(middleName(e));
                MOVE PROPERTY(passportInformation(e));
                MOVE PROPERTY(passportInformation(e));
                MOVE PROPERTY(openScanFile(e));
                MOVE PROPERTY(tariff(e));
            }
        }
        NEW hours {
            fill = 1;
            MOVE BOX(h) {
                fill = 2; 
                caption = '';
            } 
        }
    }
}

EXTEND FORM timesheetSupervisor
    PROPERTIES 'Фото' = photo(e) ON CHANGE { SHOW dialogEmployeeTimeEntryHours OBJECTS dates = dates, e = e  FLOAT;} FIRST
    PROPERTIES firstName '{First_name}' = firstName(e) ON CHANGE { SHOW dialogEmployeeTimeEntryHours OBJECTS dates = dates, e = e  FLOAT;} AFTER photo(e)
;

DESIGN timesheetSupervisor {
    PROPERTY(firstName(e)) { hide = TRUE; }
}

trunc = FORMULA INTEGER 'trunc($1)';
hoursTimesheet 'Часы' (DATE d, Employee e, Workplace w) = GROUP SUM hours(TimeEntry t) IF date(t) = d AND employee(t) = e AND workplace(t) = w;
overtimeHours 'Часы переработки' (DATE d, Employee e) = GROUP SUM overtimeHours(TimeEntry t) IF date(t) = d AND employee(t) = e;
descriptionWorkplaceTimesheet 'Время работы' (DATE d, Employee e) = 
    GROUP CONCAT (CONCAT '', 
        symbol(Workplace w), 
        '(', IF hoursTimesheet(d, e, w) - trunc(hoursTimesheet(d, e, w)) < 0.001 THEN trunc(hoursTimesheet(d, e, w)) ELSE hoursTimesheet(d, e, w), ')') IF hoursTimesheet(d, e, w), '+' ORDER w; 

descriptionTimesheet 'Время работы' (DATE d, Employee e) = 
     OVERRIDE 
        (CONCAT '+', descriptionWorkplaceTimesheet(d, e), IF overtimeHours(d, e) - trunc(overtimeHours(d, e)) < 0.001 THEN trunc(overtimeHours(d, e)) ELSE overtimeHours(d, e)), 
        STRING(IF hoursTimesheet(d,e) - trunc(hoursTimesheet(d,e)) < 0.001 THEN trunc(hoursTimesheet(d,e)) ELSE hoursTimesheet(d,e));

breakInterval 'Интервал перерыва' = DATA INTERVAL[TIME] ();
fromBreakTimeDefault 'с' = DATA TIME ();
toBreakTimeDefault 'по' = DATA TIME ();


EXTEND FORM options PROPERTIES() fromBreakTimeDefault, toBreakTimeDefault;

DESIGN options {
    commons {
        NEW breakInterval {
            horizontal = TRUE;
            caption = 'Интервал перерыва';            
            MOVE PROPERTY(fromBreakTimeDefault());
            MOVE PROPERTY(toBreakTimeDefault());
        }
    }
}

//workInterval 'Интервал работы' = DATA LOCAL NESTED INTERVAL[TIME] ();

overtimeHours 'Часы переработки' = DATA LOCAL NESTED NUMERIC[8,2]();

workplace 'Расположение' = DATA LOCAL NESTED Workplace ();
nameWorkplace 'Расположение' () = name(workplace());

timeEntryHours 'Смена' = DATA LOCAL NESTED TimeEntryHours ();
nameTimeEntryHours 'Смена' () = name(timeEntryHours());

workInterval 'Интервал работы' = DATA INTERVAL[TIME] (TimeEntry);
breakInterval 'Интервал перерыва' = DATA INTERVAL[TIME] (TimeEntry);

fromWorkTime 'с' = DATA TIME (TimeEntry);
toWorkTime 'по' = DATA TIME (TimeEntry);
fromBreakTime 'с' = DATA TIME (TimeEntry);
toBreakTime 'по' = DATA TIME (TimeEntry);

dataFromWorkTime 'с' = DATA LOCAL NESTED TIME ();
dataToWorkTime 'по' = DATA LOCAL NESTED TIME ();

fromWorkTime 'с' = OVERRIDE dataFromWorkTime(), fromWorkTime(timeEntryHours()); 
toWorkTime 'по' = OVERRIDE dataToWorkTime(), toWorkTime(timeEntryHours());

dataFromBreakTime 'с' = DATA LOCAL NESTED TIME ();
dataToBreakTime 'по' = DATA LOCAL NESTED TIME ();

time(STRING time) = TIME(toDateTimeFormat(time,'hh24:mi'));
dateTime(DATE d, TIME t) = toDateTimeFormat((CONCAT ' ', toChar(d, 'DD.MM.YYYY'), toChar(t, 'hh24:mi')),'DD.MM.YYYY hh24:mi');
fromBreakTime 'с' () = OVERRIDE dataFromBreakTime(), fromBreakTimeDefault(), time('13:00');
toBreakTime 'по' () = OVERRIDE dataToBreakTime(), toBreakTimeDefault(), time('14:00');

hoursBetweenDates(DATETIME dateFrom, DATETIME dateTo) = NUMERIC[8,2](NUMERIC[8,2](secondsBetweenDates(dateTo, dateFrom))/3600);

hoursInterval(DATETIME fromWorkTime, DATETIME toWorkTime, DATETIME fromBreakTime, DATETIME toBreakTime) = 
    CASE        
        WHEN fromWorkTime <= fromBreakTime AND toWorkTime >= toBreakTime THEN hoursBetweenDates(fromWorkTime, toWorkTime) (-) hoursBetweenDates(fromBreakTime, toBreakTime)
        WHEN fromWorkTime > fromBreakTime AND fromWorkTime < toBreakTime THEN hoursBetweenDates(toBreakTime, toWorkTime)
        WHEN toWorkTime < toBreakTime AND fromBreakTime < toWorkTime THEN hoursBetweenDates(fromWorkTime, fromBreakTime)
        WHEN toBreakTime < toWorkTime AND fromBreakTime > toWorkTime THEN NULL
        ELSE hoursBetweenDates(fromWorkTime, toWorkTime);

hoursInterval(DATE d, TIME fromWorkTime, TIME toWorkTime, TIME fromBreakTime, TIME toBreakTime) = CASE
    WHEN fromWorkTime = toWorkTime THEN 24 (-) hoursBetweenDates(dateTime(d, fromBreakTime), dateTime(d, toBreakTime))
    WHEN fromWorkTime > toWorkTime THEN 
        hoursInterval(dateTime(d, fromWorkTime), dateTime(sum(d, 1), time('00:00')), dateTime(d, fromBreakTime), dateTime(d, toBreakTime)) (+)
        hoursInterval(dateTime(sum(d, 1), time('00:00')), dateTime(sum(d, 1), toWorkTime), dateTime(sum(d, 1), fromBreakTime), dateTime(sum(d, 1), toBreakTime))
    ELSE hoursInterval(dateTime(d, fromWorkTime), dateTime(d, toWorkTime), dateTime(d, fromBreakTime), dateTime(d, toBreakTime));

hoursInterval(TimeEntry te) = hoursInterval(date(te), fromWorkTime(te), toWorkTime(te), fromBreakTime(te), toBreakTime(te)) IF te IS TimeEntry;

WHEN LOCAL FORMS timeEntry, timesheetSupervisorDateEmployee SETCHANGED(fromWorkTime(TimeEntry te)) OR SETCHANGED(toWorkTime(te)) OR SETCHANGED(fromBreakTime(te)) OR SETCHANGED(toBreakTime(te)) DO {
    hours(te) <- hoursInterval(te);
}

hoursInterval 'Hours' () = hoursInterval(currentDate(),fromWorkTime(), toWorkTime(), fromBreakTime(), toBreakTime());

FORM dialogWorkInterval 'Отметка времени'
    OBJECTS d = DATE PANEL
    OBJECTS e = Employee PANEL
    OBJECTS et = TimeEntryType PANEL

    PROPERTIES() PANEL
        nameTimeEntryHours, fromBreakTime, toBreakTime, fromWorkTime, toWorkTime, hoursInterval READONLY, overtimeHours, nameWorkplace
;

DESIGN dialogWorkInterval {
    OBJECTS {
        NEW header {
            horizontal = FALSE;

            MOVE PROPERTY(nameTimeEntryHours());
            NEW time {
                NEW breakInterval {
                    horizontal = TRUE;
                    caption = 'Интервал перерыва';
                    MOVE PROPERTY(fromBreakTime());
                    MOVE PROPERTY(toBreakTime());
                }
                NEW workInterval {
                    horizontal = TRUE;
                    caption = 'Интервал работы';
                    MOVE PROPERTY(fromWorkTime());
                    MOVE PROPERTY(toWorkTime());
                    MOVE PROPERTY(hoursInterval());
                }
            }
            MOVE PROPERTY(overtimeHours());         
            MOVE PROPERTY(nameWorkplace());         
        }
    }
}

timeEntry (DATE d, Employee e, Project p, TimeEntryType et, Workplace w) = GROUP MIN TimeEntry t BY date(t), employee(t), project(t), type(t), workplace(t);
timeEntry (DATE d, Employee e, TimeEntryType et, Workplace w) = GROUP MIN TimeEntry t BY date(t), employee(t), type(t), workplace(t);

changeTimesheetHours (DATE d, Employee e, TimeEntryType et, Workplace w, NUMERIC[8,2] n, TimeEntryHours h) {
    IF n THEN {
        IF timesheetProject() THEN {
            FOR TimeEntry t = timeEntry(d, e, timesheetProject(), et, w) DO {
                IF hours(t) = n AND h THEN
                    DELETE t;
                ELSE {
                    hours(t) <- n;
                    timeEntryHours(t) <- h;
                    workplace(t) <- w;
                    fromWorkTime(t) <- fromWorkTime();
                    toWorkTime(t) <- toWorkTime();
                    fromBreakTime(t) <- fromBreakTime();
                    toBreakTime(t) <- toBreakTime();
                    overtimeHours(t) <- overtimeHours();
                }
            } ELSE {
                DELETE TimeEntry te WHERE project(te) = timesheetProject() AND employee(te) = e AND date(te) = d AND workplace(te) = w;
                IF NOT w THEN DELETE TimeEntry te WHERE project(te) = timesheetProject() AND employee(te) = e AND date(te) = d AND NOT workplace(te);
                NEW t = TimeEntry {
                    project(t) <- timesheetProject();
                    type(t) <- et;
                    employee(t) <- e;
                    date(t) <- d;
                    hours(t) <- n;
                    timeEntryHours(t) <- h;
                    workplace(t) <- w;
                    fromWorkTime(t) <- fromWorkTime();
                    toWorkTime(t) <- toWorkTime();
                    fromBreakTime(t) <- fromBreakTime();
                    toBreakTime(t) <- toBreakTime();
                    overtimeHours(t) <- overtimeHours();
                }
            }
        } ELSE {
            FOR TimeEntry t = timeEntry(d, e, et, w) DO {
                IF hours(t) = n AND h THEN
                    DELETE t;
                ELSE {
                    hours(t) <- n;
                    timeEntryHours(t) <- h;
                    workplace(t) <- w;
                    fromWorkTime(t) <- fromWorkTime();
                    toWorkTime(t) <- toWorkTime();
                    fromBreakTime(t) <- fromBreakTime();
                    toBreakTime(t) <- toBreakTime();
                    overtimeHours(t) <- overtimeHours();
                }
            } ELSE {
                DELETE TimeEntry te WHERE NOT project(te) AND employee(te) = e AND date(te) = d AND workplace(te) = w;
                IF NOT w THEN DELETE TimeEntry te WHERE NOT project(te) AND employee(te) = e AND date(te) = d AND NOT workplace(te);
                NEW t = TimeEntry {
                    type(t) <- et;
                    employee(t) <- e;
                    date(t) <- d;
                    hours(t) <- n;
                    timeEntryHours(t) <- h;
                    workplace(t) <- w;
                    fromWorkTime(t) <- fromWorkTime();
                    toWorkTime(t) <- toWorkTime();
                    fromBreakTime(t) <- fromBreakTime();
                    toBreakTime(t) <- toBreakTime();
                    overtimeHours(t) <- overtimeHours();
                }
            }
        }
    } ELSE {
        DELETE TimeEntry t WHERE matchesProject(t) AND employee(t) = e AND date(t) = d AND workplace(t) = w;
        IF NOT w THEN DELETE TimeEntry t WHERE matchesProject(t) AND employee(t) = e AND date(t) = d AND NOT workplace(t);
    }
}

changeSaveTimesheetHours (DATE d, Employee e, TimeEntryType et, Workplace w, NUMERIC[8,2] n, TimeEntryHours h, BOOLEAN autoSave) {
    IF NOT autoSave THEN {
        changeTimesheetHours(d, e, et, w, n, h);
    } ELSE
        NEWSESSION APPLY {
            changeTimesheetHours(d, e, et, w, n, h);
        }
}

clear 'Очистить ячейку' (DATE d, Employee e) {
    DELETE TimeEntry t WHERE date(t) = d AND matchesProject(t) AND employee(t) = e;
}

clearApply 'Очисть ячейку' (DATE d, Employee e) {
    ASK 'This action cannot be undone. Continue ?' DO
        NEWSESSION APPLY { clear(d, e); }
};

clearHours 'Очистить ячейку' (DATE d, Employee e) {
    IF NOT autoSaveTimesheetHours() THEN
        clear(d, e);
    ELSE
        clearApply(d, e);
}

overCopy(TimeEntry tn, TimeEntry t) + {
    timeEntryHours(tn) <- timeEntryHours(t);
    workplace(tn) <- workplace(t);
    fromWorkTime(tn) <- fromWorkTime(t);
    toWorkTime(tn) <- toWorkTime(t);
    fromBreakTime(tn) <- fromBreakTime(t);
    toBreakTime(tn) <- toBreakTime(t);
    overtimeHours(tn) <- overtimeHours(t);
}

EXTEND FORM timesheetSupervisor
    PROPERTIES() nameEmoloyeeType SELECT 'buttonGroup'
    FILTERS employeeType() == type(e) OR NOT employeeType()
    
    PROPERTIES descriptionTimesheet(d, e) WAIT COLUMNS (d) HEADER extractDay(d) BACKGROUND backgroundHoursTimesheet(d, e)
    ON CHANGE {        
        FOR TimeEntryType et = timesheetTimeEntryType() AND (timesheetProject() OR NOT project(timeEntry(d, e, timesheetTimeEntryType()))) DO {
            timeEntryHours() <- timesheetTimeEntryHours();

            DIALOG dialogWorkInterval OBJECTS d = d, e = e, et = et DO {
                changeSaveTimesheetHours(d, e, et, workplace(), hoursInterval(), timeEntryHours(), autoSaveTimesheetHours());
            };
        } ELSE
        SHOW timesheetSupervisorDateEmployee OBJECTS i = interval(d, d), e = e FLOAT;
    } ON CONTEXTMENU copyHours(d) ON CONTEXTMENU clearHours(d, e) FOOTER hours(d, timesheetProject())
;

DESIGN timesheetSupervisor {
    OBJECTS {
        REMOVE PROPERTY (nameTimesheetTimeEntryType());
        REMOVE PROPERTY (nameTimesheetTimeEntryHours());        
        header {
            MOVE PROPERTY(nameEmoloyeeType());
        }
        tabbedPane {
            timesheet {
                MOVE BOX(e) {                    
                    PROPERTY(hoursTimesheet(d, e)) {hide = TRUE;};
                    PROPERTY(descriptionTimesheet(d, e)){
                        charWidth = 7;
                    }
                }
            }
        }
    }
}

EXTEND FORM timesheetSupervisorDateEmployee 
    PROPERTIES(t) READONLY nameWorkplace
;

EXTEND FORM timeEntry
    PROPERTIES(t) fromWorkTime, toWorkTime, fromBreakTime, toBreakTime
;

DESIGN timeEntry {
    OBJECTS {
        pane {
            time {
                NEW breakInterval {
                    horizontal = TRUE;
                    caption = 'Интервал перерыва';
                    MOVE PROPERTY(fromBreakTime(t));
                    MOVE PROPERTY(toBreakTime(t));                    
                }
                NEW workInterval {
                    horizontal = TRUE;
                    caption = 'Интервал работы';
                    MOVE PROPERTY(fromWorkTime(t));
                    MOVE PROPERTY(toWorkTime(t));
                    MOVE PROPERTY(hours(t));
                }                                
            }
        }
    }
}

EXTEND FORM timesheetSupervisorDateEmployee
    PROPERTIES(t) READONLY BEFORE hours(t) fromWorkTime, toWorkTime, fromBreakTime, toBreakTime
;

migrateTimeWorking = DATA BOOLEAN ();

onStarted() + {
    IF NOT migrateTimeWorking() THEN {
        fromWorkTime(TimeEntry t) <- from(workInterval(t)) WHERE workInterval(t);
        toWorkTime (TimeEntry t) <- to(workInterval(t)) WHERE workInterval(t);
        fromBreakTime (TimeEntry t) <- from(breakInterval(t)) WHERE breakInterval(t);
        toBreakTime (TimeEntry t) <- to(breakInterval(t)) WHERE breakInterval(t);

        migrateTimeWorking() <- TRUE;
    }
}

NAVIGATOR {
    dashboard {
        MOVE timesheetSupervisor;
    }
}