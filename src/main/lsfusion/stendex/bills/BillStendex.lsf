MODULE BillStendex;

REQUIRE BillDone, BillCanceled, ProjectBill, ServiceP, UtilsStendex;

NAMESPACE Invoicing;

forLegalEntity 'Для организаций' = DATA BOOLEAN (BillType);
legalEntityType () = GROUP MIN BillType t IF forLegalEntity(t);

forIndividual 'Для фрилансеров' = DATA BOOLEAN (BillType);
individualType () = GROUP MIN BillType t IF forIndividual(t);

defaultItem = DATA Item (BillType);
nameDefaultItem 'Услуга по умолчанию' (BillType t) = name(defaultItem(t));

EXTEND FORM billType
    PROPERTIES(o) forLegalEntity, forIndividual, nameDefaultItem
;

legalEntity (Bill b) = forLegalEntity(type(b));
individual (Bill b) = forIndividual(type(b));

CONSTRAINT SETCHANGED(vendor(Bill b)) AND vendor(b) IS LegalEntity AND NOT legalEntity(b) CHECKED BY vendor[Bill]
    MESSAGE 'Запрещено выбирать не организацию для этого типа счета';
CONSTRAINT SETCHANGED(vendor(Bill b)) AND vendor(b) IS Individual AND NOT individual(b) CHECKED BY vendor[Bill]
    MESSAGE 'Запрещено выбирать не физическое лицо для этого типа счета';
CONSTRAINT SETCHANGED(vendor(Bill b)) AND vendor(b) IS Employee CHECKED BY vendor[Bill]
    MESSAGE 'Запрещено выбирать сотрудника для этого типа счета';

WHEN LOCAL SETCHANGED(type(BillLine l)) AND NOT item(l) DO
    item(l) <- defaultItem(type(l));

FORM serviceCustom 'Услуга'
    OBJECTS s = Service PANEL
    PROPERTIES(s) dataName
//    EDIT Service OBJECT s
;

DESIGN serviceCustom {
    PROPERTY(dataName(s)) { charWidth = 50; }
}

countServices (Category c) = GROUP SUM 1 IF category(Item i) = c AND i IS Service;

addServiceCustom 'Добавить' () {
    NEW s = Service {
        category(s) <- GROUP LAST Category c ORDER DESC c WHERE countServices(c); 
        SHOW serviceCustom OBJECTS s = s;
        IF PREV(s IS Service) THEN seek(s);
    }
} IMAGE 'add.png' CHANGEKEY 'INSERT' HIDE TOOLBAR;

editServiceCustom 'Редактировать' (Service s) {
    SHOW serviceCustom OBJECTS s = s;
} IMAGE 'edit.png' CHANGEKEY 'BACK_SPACE' HIDE CHANGEMOUSE 'DBLCLK' TOOLBAR;

FORM servicesCustom 'Услуги'
    OBJECTS s = Service
    PROPERTIES(s) READONLY name
    PROPERTIES NEWSESSION addServiceCustom() DRAW s, editServiceCustom(s)
;

changeItems (Bill b) {
    DIALOG servicesCustom OBJECTS s INPUT LIST name(s) FILTERS s IS Service DO {
        IF NOT GROUP SUM 1 IF b = bill(BillLine bl) AND NOT item(bl) IS Product THEN 
            NEW l = BillLine {
                bill(l) <- b;
                item(l) <- s;
            }
        ELSE
            item(BillLine l) <- s WHERE bill(l) = b AND NOT item(l) IS Product;
    }
}

changeAmount (Bill b) {
    INPUT a = amount(b) DO {
        IF NOT countServiceLine(b) THEN
            NEW l = BillLine {
                bill(l) <- b;
                untaxedAmount(l) <- a;
            }
        ELSE
            untaxedAmount(BillLine l) <- a WHERE bill(l) = b AND NOT item(l) IS Product;
    }
}

FORM billCustom 'Счет'
    OBJECTS b = Bill PANEL
    PROPERTIES(b) imagedNameStatus,
                  'Услуга' = items ON CHANGE changeItems(b),
                  nameCompany,
                  nameProject,
                  nameVendor,
                  note,
                  amount ON CHANGE changeAmount(b),
                  details

    PROPERTIES(b) ready, done, canceled, cancel SHOWIF status(b) = BillStatus.draft 
;

DESIGN billCustom {
    OBJECTS {
        NEW statusPane {
            caption = 'Statuses';
            horizontal = TRUE;
            alignment = STRETCH;
            NEW statusActions {
                horizontal = TRUE;
                MOVE PROPERTY (cancel(b));
            }
            NEW status {
                flex = 1;
                NEW statusInfo {
                    alignment = END;
                    horizontal = TRUE;
                    MOVE PROPERTY(imagedNameStatus(b));
                    MOVE PROPERTY(ready(b));
                    MOVE PROPERTY(done(b));
                    MOVE PROPERTY(canceled(b));
                }
            }
        }
        NEW header {
            horizontal = TRUE;
            alignment = STRETCH;
            NEW headerLeft {
                lines = 2;
                MOVE PROPERTY(items(b)) { charWidth = 40; fontSize = 24; }
                MOVE PROPERTY(nameCompany(b)) { charWidth = 40; fontSize = 24; }
                MOVE PROPERTY(nameProject(b)) { charWidth = 40; fontSize = 24; }
                MOVE PROPERTY(nameVendor(b)) { charWidth = 40; fontSize = 24; }
                MOVE PROPERTY(note(b)) { fontSize = 24; }
                MOVE PROPERTY(amount(b)) { fontSize = 24; }
            }
        }
        NEW details {
            tabbed = TRUE;
            fill = 1;
        }
    }
}

@defineObjectFilesForm(bill, billCustom, b);

CLASS TypeFile{
    paymentOrder 'Платежное поручение',
    invoice 'Счет',
    other 'Другое'
}

type = DATA TypeFile (BillFile) NONULL;
nameType 'Тип' (BillFile f) = staticCaption(type(f));

uploadFile 'Загрузить файл'(Bill b){
    INPUT uf = NAMEDFILE DO NEW uof = BillFile {
        bill(uof) <- b;
        file(uof) <- RAWFILE(uf);
        name(uof) <- name(uf);
        extension(uof) <- extension(uf);
    }
} IMAGE 'add.png';

uploadInvoice 'Счет' (Bill b){
    INPUT uf = NAMEDFILE DO NEW uof = BillFile {
        bill(uof) <- b;
        file(uof) <- RAWFILE(uf);
        name(uof) <- name(uf);
        extension(uof) <- extension(uf);
        type(uof) <- TypeFile.invoice;
    }
} IMAGE 'add.png';


uploadPaymentOrder 'Платежное поручение' (Bill b){
    INPUT uf = NAMEDFILE DO NEW uof = BillFile {
        bill(uof) <- b;
        file(uof) <- RAWFILE(uf);
        name(uof) <- name(uf);
        extension(uof) <- extension(uf);
        type(uof) <- TypeFile.paymentOrder;
    }
} IMAGE 'add.png';


countPaymentOrders(Bill b) = GROUP SUM 1 IF type(BillFile f) = TypeFile.paymentOrder AND bill(f) = b;
countInvoices(Bill b) = GROUP SUM 1 IF type(BillFile f) = TypeFile.invoice AND bill(f) = b;

CONSTRAINT LOCAL SETCHANGED (status(Bill b)) AND status(b) = BillStatus.ready AND NOT countInvoices(b)
    MESSAGE 'Для перевода в статус "К оплате" необходимо прикрепить счет!';

CONSTRAINT LOCAL SETCHANGED (status(Bill b)) AND status(b) = BillStatus.done AND NOT countPaymentOrders(b)
    MESSAGE 'Для перевода в статус "Оплачено" необходимо прикрепить платежное поручение!';


EXTEND FORM billCustom
    PROPERTIES TOOLBAR DRAW of uploadInvoice(b), uploadPaymentOrder(b) SHOWIF status(b) != BillStatus.draft
    PROPERTIES nameType(of) FIRST READONLY
;

DESIGN billCustom {
    REMOVE PROPERTY (uploadFile());
    details {
        NEW detailsInformation {
            caption = 'Details';
            MOVE PROPERTY(details(b)) {
                caption = '';
                fill = 1;
                height = 300;
            }
        }
    }
}

newLegalEntityBill 'Добавить' () {
    NEWSESSION {
        NEW b = Bill {
            type(b) <- legalEntityType(); 
            SHOW billCustom OBJECTS b = b;
        }
    }
}

newIndividualBill 'Добавить' () {
    NEWSESSION {
        NEW b = Bill {
            type(b) <- individualType();
            SHOW billCustom OBJECTS b = b;
        }
    }
}

editBillCustom 'Редактировать' (Bill b) {
    SHOW billCustom OBJECTS b = b;
} IMAGE 'edit.png' CHANGEKEY 'BACK_SPACE' HIDE CHANGEMOUSE 'DBLCLK' TOOLBAR;

filterProject = DATA LOCAL NESTED Project ();
nameFilterProject 'Проект' = name(filterProject());

filterRepresentative = DATA LOCAL NESTED Employee ();
nameFilterRepresentative 'Наш представитель' = MasterData.name(filterRepresentative());
filterStatus = DATA BillStatus ();
nameFilterStatus 'Статус оплаты' = name(filterStatus());

FORM billDashboard 'Счета на услуги'
    OBJECTS bl = Bill
    PROPERTIES(bl) READONLY number, date, imagedNameStatus BACKGROUND colorStatus(bl), nameVendor,
                            items, nameProject, note, nameRepresentative, amount
    PROPERTIES(bl) 'Счет' = openFiles GRID, cancel SHOWIF status(bl) = BillStatus.draft
    PROPERTIES newLegalEntityBill() DRAW bl TOOLBAR
    PROPERTIES(bl) NEWSESSION editBillCustom, DELETE
    FILTERS legalEntity(bl)

    OBJECTS bi 'Оплата freelance' = Bill
    PROPERTIES(bi) READONLY number, date, imagedNameStatus BACKGROUND colorStatus(bi), nameVendor, 
                            items, nameProject, note, nameRepresentative, amount
    PROPERTIES(bi) 'Счет' = openFiles GRID, cancel SHOWIF status(bi) = BillStatus.draft
    PROPERTIES newIndividualBill() DRAW bi TOOLBAR
    PROPERTIES(bi) NEWSESSION editBillCustom, DELETE
    FILTERS individual(bi)

    PROPERTIES() nameFilterProject, nameFilterRepresentative, nameFilterStatus 
    FILTERS project(bl) = filterProject() OR NOT filterProject(), 
        project(bi) = filterProject() OR NOT filterProject(),
        representative(bl) = filterRepresentative() OR NOT filterRepresentative(), 
        representative(bi) = filterRepresentative() OR NOT filterRepresentative(),
        status(bl) = filterStatus() OR NOT filterStatus(), status(bi) = filterStatus() OR NOT filterStatus()
;

DESIGN billDashboard {
    OBJECTS {
        NEW filters {
            caption = '';
            border = FALSE;
            alignment = CENTER;
            horizontal = TRUE;
            MOVE PROPERTY (nameFilterProject());
            MOVE PROPERTY (nameFilterRepresentative());
            MOVE PROPERTY (nameFilterStatus());
        }
        NEW pane{
            fill = 1;
            NEW billLegalEntity {
                caption = 'Счета на оплату';
                fill = 1;
                NEW headerLegalEntity {
                    horizontal = TRUE;
                    alignment = STRETCH;
                    MOVE TOOLBAR(bl);
                    NEW actionsLegalEntity {
                        fill = 1;
                        NEW markLegalEntity {
                            horizontal = TRUE;
                            alignment = END;
                            MOVE PROPERTY (cancel(bl));
                        }
                    }
                }
                MOVE BOX(bl) { caption = ''; };
            }
            NEW billIndividual {
                caption = 'Оплата freelance';
                fill = 1;
                NEW headerIndividual {  
                    horizontal = TRUE;
                    alignment = STRETCH;
                    MOVE TOOLBAR(bi);
                    NEW actionsIndividual {
                        fill = 1;
                        NEW markIndividual {
                            horizontal = TRUE;
                            alignment = END;
                            MOVE PROPERTY (cancel(bi));
                        }
                    }
                }
                MOVE BOX(bi) { caption = ''; }
            }
        }
    }
}

NAVIGATOR {
    dashboard {
        NEW billDashboard;
    }
}