MODULE BillStendex;

REQUIRE BillDone, BillCanceled, ProjectBill, ServiceP, UtilsStendex, EmployeeStendex, PartnerStendex;

NAMESPACE Invoicing;

in 'On' = DATA BOOLEAN (Bill, Project);
countProjects (Bill b) =  GROUP SUM 1 IF in(b, Project p);
amount 'Сумма по проекту' = DATA NUMERIC[14,2] (Bill, Project);
amountProjects 'Сумма по проекту' (Bill b) = GROUP SUM amount(b, Project p) IF in(b,p);

nameProjects 'Проекты' (Bill b) = GROUP CONCAT name(Project p) IF in(b, p), '/' ORDER p;

FORM changeBillProjects 'Выбрать проекты'
    OBJECTS b = Bill PANEL
    OBJECTS p = Project
    PROPERTIES(b,p) in
    PROPERTIES(p) READONLY number, startDate, endDate, namePartner, nameType, name, nameCompany

    FILTERGROUP active
        FILTER 'Opened' NOT archived(p) AND NOT closed(p) DEFAULT
        FILTER 'Closed' archived(p) OR closed(p)
;

DESIGN changeBillProjects{
    PROPERTY (in(b, p)) {changeOnSingleClick = TRUE; }
}
changeBillProjects 'Выбрать проекты' (Bill b) {
    DIALOG changeBillProjects OBJECTS b = b;
}

overFillAmountProjects ABSTRACT LIST (Bill);
fillAmountProjects 'Расписать по проектам' (Bill b) {
    amount(b, Project p) <- NULL;
    overFillAmountProjects(b);
}

EXTEND FORM bill
    PROPERTIES (b) READONLY nameProjects
    
    OBJECTS p = Project
    PROPERTIES(p) READONLY number, startDate, endDate, namePartner, nameType, name, nameCompany
    PROPERTIES(b,p) READONLYIF readonly(b) amount
    PROPERTIES(b) READONLYIF readonly(b) TOOLBAR DRAW p changeBillProjects
    FILTERS in(b,p)
;

DESIGN bill {
    headerRight {
        MOVE PROPERTY(nameProjects(b)) AFTER PROPERTY(nameProject(b));
        REMOVE PROPERTY(nameProject(b));
    }
    details {
        NEW projects {
            caption = badged('Projects', countProjects(b));
            MOVE BOX(p) { caption = ''; }
        }
    }
}

EXTEND FORM bills
    PROPERTIES(b) READONLY nameProjects AFTER nameProject(b)
;

DESIGN bills {
    PROPERTY(nameProject(b)) { showIf = NULL; }
}
skipCheckSumBillProjects = DATA BOOLEAN ();

CONSTRAINT (SETCHANGED(amount(Bill b)) OR SETCHANGED(amountProjects(b))) AND NOT skipCheckSumBillProjects() AND amount(b) AND NOT amount(b) == amountProjects(b)
    MESSAGE 'Не совпадает сумма по проектам и итоговая сумма счета';

EXTEND CLASS BillStatus {
    onApproval 'На утверждении'
}

onApproval 'На утверждении' = DATA BOOLEAN (Bill);

status(Bill b) += WHEN onApproval(b) AND NOT (ready(b) OR done(b) OR canceled(b)) THEN BillStatus.onApproval;
color(BillStatus b) += WHEN b = BillStatus.onApproval THEN RGB(217,247,149);

markAsOnApproval 'На утверждение' (Bill b) {
    APPLY;
    IF canceled() THEN RETURN;

    NEWSESSION {
        onApproval(b) <- TRUE;
        APPLY;
    }
}

EXTEND FORM bill
    PROPERTIES(b) markAsOnApproval SHOWIF status(b) = BillStatus.draft, onApproval
    PROPERTIES(b) markAsToDoStendex = markAsToDo SHOWIF status(b) == BillStatus.onApproval
;

DESIGN bill {
    primaryActions {
        MOVE PROPERTY(markAsOnApproval(b)) BEFORE PROPERTY(markAsToDo(b)) { valueClass = 'btn-primary'; }
        MOVE PROPERTY(markAsToDoStendex) AFTER PROPERTY(markAsOnApproval(b)) { valueClass = 'btn-primary'; }
        REMOVE PROPERTY(markAsToDo(b));
    }
    status {
        MOVE PROPERTY(onApproval(b)) BEFORE PROPERTY(ready(b));
    }
}

EXTEND FORM bills
    EXTEND FILTERGROUP status
        FILTER 'На утверждении' status(b) = BillStatus.onApproval
;

@defineSelectionAction(bills, Bill, markAsOnApproval, 'На утверждение', statuses);

DESIGN bills {
    statuses {
        MOVE PROPERTY(markAsOnApprovalBills()) BEFORE PROPERTY(markAsToDoBills());
    }
}

isUrgent 'Срочный' = DATA BOOLEAN (Bill);
includeVAT 'С НДС' = DATA BOOLEAN (Bill);

overNameRepresentative 'Our representative' (Bill o)= OVERRIDE MasterData.overName(representative(o)), MasterData.name(representative(o));

EXTEND FORM bill
    PROPERTIES(b) READONLYIF readonly(b) overNameRepresentative
;
DESIGN bill {
    billInformat {
        MOVE PROPERTY(overNameRepresentative(b)) AFTER PROPERTY(nameRepresentative(b));
        REMOVE PROPERTY(nameRepresentative(b));
    }
}

forLegalEntity 'Для организаций' = DATA BOOLEAN (BillType);
legalEntityType () = GROUP MIN BillType t IF forLegalEntity(t);

forIndividual 'Для фрилансеров' = DATA BOOLEAN (BillType);
individualType () = GROUP MIN BillType t IF forIndividual(t);

defaultItem = DATA Item (BillType);
nameDefaultItem 'Услуга по умолчанию' (BillType t) = name(defaultItem(t));

billService 'Счет на услуги' = DATA BOOLEAN (BillType);

EXTEND FORM billType
    PROPERTIES(o) forLegalEntity, forIndividual, nameDefaultItem, billService
;

legalEntity (Bill b) = forLegalEntity(type(b));
individual (Bill b) = forIndividual(type(b));

CONSTRAINT SETCHANGED(vendor(Bill b)) AND vendor(b) IS LegalEntity AND NOT legalEntity(b) CHECKED BY vendor[Bill]
    MESSAGE 'Запрещено выбирать не организацию для этого типа счета';
CONSTRAINT SETCHANGED(vendor(Bill b)) AND vendor(b) IS Individual AND NOT individual(b) CHECKED BY vendor[Bill]
    MESSAGE 'Запрещено выбирать не физическое лицо для этого типа счета';
CONSTRAINT SETCHANGED(vendor(Bill b)) AND vendor(b) IS Employee CHECKED BY vendor[Bill]
    MESSAGE 'Запрещено выбирать сотрудника для этого типа счета';

WHEN LOCAL SETCHANGED(type(BillLine l)) AND NOT item(l) DO
    item(l) <- defaultItem(type(l));

FORM serviceCustom 'Услуга'
    OBJECTS s = Service PANEL
    PROPERTIES(s) dataName
//    EDIT Service OBJECT s
;

DESIGN serviceCustom {
    PROPERTY(dataName(s)) { charWidth = 50; }
}

countServices (Category c) = GROUP SUM 1 IF category(Item i) = c AND i IS Service;

addServiceCustom 'Добавить' () {
    NEW s = Service {
        category(s) <- GROUP LAST Category c ORDER DESC c WHERE countServices(c); 
        SHOW serviceCustom OBJECTS s = s;
        IF PREV(s IS Service) THEN seek(s);
    }
} IMAGE 'add.png' CHANGEKEY 'INSERT' HIDE TOOLBAR;

editServiceCustom 'Редактировать' (Service s) {
    SHOW serviceCustom OBJECTS s = s;
} IMAGE 'edit.png' CHANGEKEY 'BACK_SPACE' HIDE CHANGEMOUSE 'DBLCLK' TOOLBAR;

FORM servicesCustom 'Услуги'
    OBJECTS s = Service
    PROPERTIES(s) READONLY name
    PROPERTIES NEWSESSION addServiceCustom() DRAW s, editServiceCustom(s)
;

changeItems (Bill b) {
    DIALOG servicesCustom OBJECTS s INPUT LIST name(s) FILTERS s IS Service DO {
        IF NOT GROUP SUM 1 IF b = bill(BillLine bl) AND NOT item(bl) IS Product THEN 
            NEW l = BillLine {
                bill(l) <- b;
                item(l) <- s;
            }
        ELSE
            item(BillLine l) <- s WHERE bill(l) = b AND NOT item(l) IS Product;
    }
}

changeAmount (Bill b) {
    INPUT a = amount(b) DO {
        IF NOT countServiceLine(b) THEN
            NEW l = BillLine {
                bill(l) <- b;
                untaxedAmount(l) <- a;
            }
        ELSE
            untaxedAmount(BillLine l) <- a WHERE bill(l) = b AND NOT item(l) IS Product;
    }
}
changeAmount(Bill b, NUMERIC[14,2] amount){
    IF NOT countServiceLine(b) THEN
        NEW l = BillLine {
            bill(l) <- b;
            untaxedAmount(l) <- amount;
        }
    ELSE
        untaxedAmount(BillLine l) <- amount WHERE bill(l) = b AND NOT item(l) IS Product;
}


showAllInvoices 'Показывать все счета' = DATA BOOLEAN (UserRole);
showAllInvoices (User u) = GROUP SUM 1 IF showAllInvoices(UserRole r) AND has(u, r);
editAllInvoices 'Редактировать закрытые счета' =  DATA BOOLEAN (UserRole);
editAllInvoices (User u) = GROUP SUM 1 IF editAllInvoices(UserRole r) AND has(u, r);

EXTEND FORM securityPolicy
    PROPERTIES(ur) PANEL showAllInvoices, editAllInvoices
;
DESIGN securityPolicy {
    roleApplicationSettings {
        tabbed = TRUE;
        NEW bill {
            caption = 'Bill';
            lines = 3;
            MOVE PROPERTY(showAllInvoices(ur));
            MOVE PROPERTY(editAllInvoices(ur));
        }
    }
}

overNameVendor 'Vendor' (Bill b) = overName(vendor(b));

editingOn 'Редактировать' = DATA LOCAL BOOLEAN (Bill);
WHEN LOCAL SET(Bill b IS Bill) DO editingOn(b) <- TRUE;

readonly(Bill b) += WHEN b IS Bill AND NOT editingOn(b) THEN TRUE;

FORM billCustom 'Счет'
    OBJECTS b = Bill PANEL
    PROPERTIES(b) READONLYIF readonly(b)
                  imagedNameStatus,
                  'Услуга' = items ON CHANGE changeItems(b),
                  nameCompany,
                  nameProjects READONLY,
                  overNameVendor,
                  note,
                  amount READONLY,
                  details,
                  isUrgent, includeVAT

    PROPERTIES(b) onApproval, ready, done, canceled, cancel SHOWIF status(b) = BillStatus.draft

    PROPERTIES(b) editingOn DISABLEIF ready(b) AND NOT editAllInvoices(currentUser())
    
    OBJECTS pr = Project
    PROPERTIES(pr) READONLY number, startDate, endDate, namePartner, nameType, name, nameCompany
    PROPERTIES(b,pr) READONLYIF readonly(b) amount
    PROPERTIES(b) READONLYIF readonly(b) TOOLBAR DRAW pr changeBillProjects
    FILTERS in(b,pr) 
;

DESIGN billCustom {
    OBJECTS {
        NEW statusPane {
            caption = 'Statuses';
            horizontal = TRUE;
            alignment = STRETCH;
            NEW statusActions {
                horizontal = TRUE;
                MOVE PROPERTY(editingOn(b));
                MOVE PROPERTY(cancel(b));
            }
            NEW status {
                flex = 1;
                NEW statusInfo {
                    alignment = END;
                    horizontal = TRUE;
                    MOVE PROPERTY(imagedNameStatus(b));
                    MOVE PROPERTY(onApproval(b));
                    MOVE PROPERTY(ready(b));
                    MOVE PROPERTY(done(b));
                    MOVE PROPERTY(canceled(b));
                }
            }
        }
        NEW header {
            horizontal = TRUE;
            alignment = STRETCH;
            NEW headerLeft {
                lines = 2;
                MOVE PROPERTY(items(b)) { charWidth = 40; fontSize = 24; }
                MOVE PROPERTY(nameCompany(b)) { charWidth = 40; fontSize = 24; }
                MOVE PROPERTY(nameProjects(b)) { charWidth = 40; fontSize = 24; }
                MOVE PROPERTY(overNameVendor(b)) { charWidth = 40; fontSize = 24; }
                MOVE PROPERTY(note(b)) { fontSize = 24; }
                MOVE PROPERTY(amount(b)) { fontSize = 24; }
                MOVE PROPERTY(isUrgent(b));
                MOVE PROPERTY(includeVAT(b));
            }
        }
        NEW details {
            tabbed = TRUE;
            fill = 1;
            NEW projects {
                caption = badged('Projects', countProjects(b));
                MOVE BOX(pr) { caption = ''; }
            }
        }
    }
}

@defineObjectFilesForm(bill, billCustom, b);
@defineDocHistoryForm(bill, billCustom, b);

CLASS TypeFile{
    paymentOrder 'Платежное поручение',
    invoice 'Счет',
    receipt 'Чек на оплату',
    other 'Другое'
}
lockChangeType = DATA BOOLEAN (BillFile);
type = DATA TypeFile (BillFile) NONULL;
nameType 'Тип' (BillFile f) = staticCaption(type(f));

WHEN LOCAL SET(BillFile f IS BillFile) AND NOT type(f) DO type(f) <- TypeFile.other;

uploadFile 'Загрузить файл'(Bill b){
    INPUT uf = NAMEDFILE DO NEW uof = BillFile {
        bill(uof) <- b;
        file(uof) <- RAWFILE(uf);
        name(uof) <- name(uf);
        extension(uof) <- extension(uf);
    }
} IMAGE 'add.png';

uploadInvoice 'Счет' (Bill b){
    INPUT uf = NAMEDFILE DO NEW uof = BillFile {
        bill(uof) <- b;
        file(uof) <- RAWFILE(uf);
        name(uof) <- name(uf);
        extension(uof) <- extension(uf);
        type(uof) <- TypeFile.invoice;
        lockChangeType(uof) <- TRUE;
        onApproval(b) <- TRUE;
    }
} IMAGE 'add.png';


uploadPaymentOrder 'Платежное поручение' (Bill b){
    INPUT uf = NAMEDFILE DO NEW uof = BillFile {
        bill(uof) <- b;
        file(uof) <- RAWFILE(uf);
        name(uof) <- name(uf);
        extension(uof) <- extension(uf);
        type(uof) <- TypeFile.paymentOrder;
        lockChangeType(uof) <- TRUE;
    }
} IMAGE 'add.png';


countPaymentOrders(Bill b) = GROUP SUM 1 IF type(BillFile f) = TypeFile.paymentOrder AND bill(f) = b;
countInvoices(Bill b) = GROUP SUM 1 IF type(BillFile f) = TypeFile.invoice AND bill(f) = b;

CONSTRAINT SETCHANGED (status(Bill b)) AND status(b) = BillStatus.ready AND NOT countInvoices(b)
    MESSAGE 'Для перевода в статус "К оплате" необходимо прикрепить счет!';

CONSTRAINT SETCHANGED (status(Bill b)) AND status(b) = BillStatus.done AND NOT countPaymentOrders(b)
    MESSAGE 'Для перевода в статус "Оплачено" необходимо прикрепить платежное поручение!';


EXTEND FORM billCustom
    PROPERTIES TOOLBAR DRAW of uploadInvoice(b) READONLYIF readonly(b), uploadPaymentOrder(b) SHOWIF status(b) != BillStatus.draft
    PROPERTIES nameType(of) FIRST READONLYIF lockChangeType(of) OR readonly(b)
;

DESIGN billCustom {
    details {
        NEW detailsInformation {
            caption = 'Details';
            MOVE PROPERTY(details(b)) {
                caption = '';
                fill = 1;
                height = 200;
            }
        }
    }
}

newLegalEntityBill 'Добавить' () {
    NEWSESSION {
        NEW b = Bill {
            type(b) <- legalEntityType(); 
            SHOW billCustom OBJECTS b = b;
        }
    }
}

newIndividualBill 'Добавить' () {
    NEWSESSION {
        NEW b = Bill {
            type(b) <- individualType();
            SHOW billCustom OBJECTS b = b;
        }
    }
}

editBillCustom 'Редактировать' (Bill b) {
    SHOW billCustom OBJECTS b = b;
} IMAGE 'edit.png' CHANGEKEY 'BACK_SPACE' HIDE CHANGEMOUSE 'DBLCLK' TOOLBAR;

filterProject = DATA LOCAL NESTED Project ();
nameFilterProject 'Проект' = name(filterProject());

filterRepresentative = DATA LOCAL NESTED Employee ();
nameFilterRepresentative 'Наш представитель' = MasterData.overName(filterRepresentative());
filterStatus = DATA BillStatus ();
nameFilterStatus 'Статус оплаты' = name(filterStatus());
filterUrgent 'Срочные' = DATA LOCAL BOOLEAN ();

backgroundColor = ABSTRACT CASE COLOR (Bill);
backgroundColor(Bill b) += WHEN isUrgent(b) THEN RGB(237,193,116);
overBackgroundColor (Bill b) = OVERRIDE backgroundColor(b), colorStatus(b);

FORM billDashboard 'Счета на услуги'
    PROPERTIES() nameFilterProject, nameFilterRepresentative, nameFilterStatus, filterUrgent
;

DESIGN billDashboard {
    OBJECTS {
        class = '';
        border = FALSE;
        NEW filters {
            caption = '';
            border = FALSE;
            alignment = CENTER;
            horizontal = TRUE;
            MOVE PROPERTY (nameFilterProject());
            MOVE PROPERTY (nameFilterRepresentative());
            MOVE PROPERTY (nameFilterStatus());
            MOVE PROPERTY (filterUrgent());
            MOVE PROPERTY (formRefresh());
        }
        NEW tab {
            fill = 1;
            alignment = STRETCH;
            tabbed = TRUE;
        }
        REMOVE TOOLBARBOX;
    }
}

NAVIGATOR {
    dashboard {
        NEW billDashboard;
    }
}

DESIGN securityPolicy {
    roleApplicationSettings {
        tabbed = TRUE;
        NEW billDashboard {
            caption = 'Счета на услуги';
            lines = 3;
        }
    }
}

openFilesInvoice (Bill i) {
    FOR BillFile bf IS BillFile AND bill(bf) = i AND type(bf) = TypeFile.invoice DO {
        open(bf);
    }
}

META billDashboardStatus(st, capt)
    showBill###st##Tab 'Отображать вкладку '##capt = DATA BOOLEAN (UserRole);
    showBill###st##Tab (User u) = GROUP SUM 1 IF showBill###st##Tab(UserRole r) AND has(u, r);
    showBill###st##Tab = showBill###st##Tab(currentUser());

    EXTEND FORM securityPolicy
        PROPERTIES(ur) PANEL showBill###st##Tab
    ;
    DESIGN securityPolicy {
        billDashboard {
            MOVE PROPERTY(showBill###st##Tab(ur));
        }
    }

    EXTEND FORM billDashboard
        OBJECTS st##LE = Bill BACKGROUND overBackgroundColor(st##LE)
        PROPERTIES(st##LE) READONLY number, date, overNameVendor, items, nameProjects, note, overNameRepresentative, nameCompany, amount
        PROPERTIES(st##LE) 'Счет' = openFilesInvoice GRID
        PROPERTIES(st##LE) NEWSESSION editBillCustom
        PROPERTIES(st##LE) NEWSESSION DELETE
        FILTERS status(st##LE) = BillStatus.st
        FILTERS legalEntity(st##LE), billService(type(st##LE)),
                representative(st##LE) = currentUser() OR showAllInvoices(currentUser()) OR NOT representative(st##LE)
        FILTERS in(st##LE, filterProject()) OR NOT filterProject(),
                representative(st##LE) = filterRepresentative() OR NOT filterRepresentative(),
                status(st##LE) = filterStatus() OR NOT filterStatus(),
                isUrgent(st##LE) OR NOT filterUrgent()
        
        PROPERTIES st##LE##Order 'Порядок' = VALUE(st##LE)
        ORDERS st##LE##Order DESC

        OBJECTS st##I = Bill BACKGROUND overBackgroundColor(st##I)
        PROPERTIES(st##I) READONLY number, date, overNameVendor, items, nameProjects, note, overNameRepresentative, amount
        PROPERTIES(st##I) 'Счет' = openFiles GRID
        PROPERTIES(st##I) NEWSESSION editBillCustom
        PROPERTIES(st##I) NEWSESSION DELETE
        FILTERS status(st##I) = BillStatus.st
        FILTERS individual(st##I), billService(type(st##I)),
            representative(st##I) = currentUser() OR showAllInvoices(currentUser()) OR NOT representative(st##I)
        FILTERS in(st##I, filterProject()) OR NOT filterProject(),
                representative(st##I) = filterRepresentative() OR NOT filterRepresentative(),
                status(st##I) = filterStatus() OR NOT filterStatus(),
                isUrgent(st##I) OR NOT filterUrgent()
        
        PROPERTIES st##I##Order 'Порядок' = LONG(st##I) SHOWIF NULL
        ORDERS st##I##Order DESC
    ;

    filtered###st##LE(Bill b) = FILTER billDashboard.st##LE;
    filtered###st##I(Bill b) = FILTER billDashboard.st##I;
    countFiltered###st = GROUP SUM 1 IF filtered###st##LE(Bill b) OR filtered###st##I(b);
    
    DESIGN billDashboard{
        tab {
            NEW st {
                caption = badged(capt, countFiltered###st());
                showIf = showBill###st##Tab();
                fill = 1;
                NEW st##LE {
                    caption = 'Счета на оплату';
                    fill = 1;
                    NEW st##LE##Header {
                        horizontal = TRUE;
                        alignment = STRETCH;
                        MOVE TOOLBAR(st##LE);
                        NEW st##LE##Actions {
                            fill = 1;
                            NEW st##LE##Mark {
                                horizontal = TRUE;
                                alignment = END;
                            }
                        }
                    }
                    MOVE BOX(st##LE) { caption = ''; };
                }
                NEW st##I {
                    caption = 'Оплата freelance';
                    fill = 1;
                    NEW st##I##Header {
                        horizontal = TRUE;
                        alignment = STRETCH;
                        MOVE TOOLBAR(st##I);
                        NEW st##I##Actions {
                            fill = 1;
                            NEW st##I##Mark {
                                horizontal = TRUE;
                                alignment = END;
                            }
                        }
                    }
                    MOVE BOX(st##I) { caption = ''; };
                }
            }
        }
    }
END

@billDashboardStatus(draft, 'Формирование');
@billDashboardStatus(onApproval, 'На утверждении');
@billDashboardStatus(ready, 'К оплате');
@billDashboardStatus(done, 'Оплачено');
@billDashboardStatus(canceled, 'Отменен');

countBillPaymentOrders 'Кол-во платёжных поручений' (Bill i) = GROUP SUM 1 IF bill(BillFile bf) = i AND type(bf) = TypeFile.paymentOrder;

paymentOrder 'ПП' (Bill i) = GROUP MAX BillFile bf IF bill(bf) = i AND type(bf) = TypeFile.paymentOrder;

FORM listBillPaymentOrders 'Платёжные документы'
    OBJECTS i = Bill

    OBJECTS bf = BillFile
    PROPERTIES(bf) READONLYIF readonly(i) name, description
    PROPERTIES(bf) READONLY nameUser, dateTime

    FILTERS bill(bf) = i
    FILTERS type(bf) = TypeFile.paymentOrder
;

DESIGN listBillPaymentOrders {
    BOX (bf) { caption = ''; }
}

openBillPaymentOrder 'ПП' (Bill i) {
    CASE EXCLUSIVE
        WHEN countBillPaymentOrders(i) > 1 THEN DIALOG listBillPaymentOrders OBJECTS i = i, bf INPUT bf DO open(bf);
        WHEN countBillPaymentOrders(i) = 1 THEN open(file(paymentOrder(i)), nameExtension(paymentOrder(i)));
        ELSE MESSAGE 'Отсутствует ПП, прикреплённое к счёту';
}