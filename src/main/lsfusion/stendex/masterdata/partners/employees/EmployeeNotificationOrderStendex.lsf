MODULE EmployeeNotificationOrderStendex;

REQUIRE EmployeeNotificationStendex, PurchaseOrderStendex;

NAMESPACE Notifications;

EXTEND CLASS TypeEmailNotification {
    createOrder 'Cоздание заказа',
    paidOrder 'Оплата заказа'
}

sentDateTime 'Отправлено уведомление'  = DATA DATETIME (TypeEmailNotification, Order);

condionSendEmail 'Отправить' = ABSTRACT VALUE BOOLEAN (TypeEmailNotification, Order, Employee);

condionSendEmail(TypeEmailNotification en, Order o, Employee e) += e IS Employee AND o IS Order AND en == TypeEmailNotification.createOrder;
condionSendEmail(TypeEmailNotification en, Order o, Employee e) += representative(o) == e AND en == TypeEmailNotification.paidOrder;

notificationEmails (TypeEmailNotification en, Order o) = GROUP CONCAT email(en, Employee e) IF notifite(en, e) AND condionSendEmail(en, o, e), ',' ORDER e;

bodyNotificationCreate (Order o) = CONCAT '\n', 'Создан заказ', '№' + number(o), 'Поставщик ' + nameVendor(o), 'Автор ' + nameRepresentative(o), 'Сумма ' + amount(o);
attachFileCreate(Order o) = GROUP MAX OrderFile of  IF type(of) == Purchase.TypeFile.invoice BY order(of);

sendEmailNotificationCreate 'Отправить' (TypeEmailNotification en, Order o) {
    EMAIL
        SUBJECT (CONCAT  ' ', 'Добавлен новый заказ на утверждение', '№' + number(o), toChar(date(o), 'dd.MM.yyyy'))
        TO notificationEmails(en, o)
        BODY bodyNotificationCreate(o)
        ATTACH file(file(attachFileCreate(o)), extension(attachFileCreate(o))) NAME name(attachFileCreate(o));
    APPLY;
    IF canceled() THEN RETURN;

    sentDateTime(en, o) <- currentDateTime();
    APPLY;
}

bodyNotificationPaid (Order o) = CONCAT '\n', 'Оплачен заказ', '№' + number(o), 'Поставщик ' + nameVendor(o), 'Автор ' + nameRepresentative(o), 'Сумма ' + amount(o);
attachFilePaid(Order o) = GROUP MAX OrderFile of  IF type(of) == Purchase.TypeFile.paymentOrder BY order(of);

sendEmailNotificationPaid 'Отправить' (TypeEmailNotification en, Order o) {
    EMAIL
        SUBJECT (CONCAT  ' ', 'Оплачен заказ на утверждение', '№' + number(o), toChar(date(o), 'dd.MM.yyyy'))
        TO notificationEmails(en, o)
        BODY bodyNotificationPaid(o)
        ATTACH file(file(attachFilePaid(o)), extension(attachFilePaid(o))) NAME name(attachFilePaid(o));
    APPLY;
    IF canceled() THEN RETURN;

    sentDateTime(en, o) <- currentDateTime();
    APPLY;
}

needSendEmail = DATA BOOLEAN(TypeEmailNotification, Order);

WHEN SETCHANGED(Order o IS Order)
    DO needSendEmail(TypeEmailNotification.createOrder, o) <- TRUE;

WHEN SETCHANGED(status(Order o)) AND (status(o) == OrderStatus.awaitingDelivery) // status(o) == OrderStatus.partiallyPaid OR
    DO needSendEmail(TypeEmailNotification.paidOrder, o) <- TRUE;


condionSendEmail 'Отправить' = ABSTRACT VALUE BOOLEAN (TypeEmailNotification, Order);

condionSendEmail(TypeEmailNotification en, Order o) += needSendEmail(en, o) AND NOT sentDateTime(en, o) AND en == TypeEmailNotification.createOrder;
condionSendEmail(TypeEmailNotification en, Order o) += needSendEmail(en, o) AND NOT sentDateTime(en, o) AND en == TypeEmailNotification.paidOrder;

sendEmailNotification(DATE dFrom) + {
    FOR date(Order o) >= dFrom AND condionSendEmail(TypeEmailNotification.createOrder, o) DO sendEmailNotificationCreate(TypeEmailNotification.createOrder, o);
    FOR date(Order o) >= dFrom AND condionSendEmail(TypeEmailNotification.paidOrder, o) DO sendEmailNotificationPaid(TypeEmailNotification.paidOrder, o);
}